#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import os
import sys
import math
import pprint

PWD = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(os.path.dirname(PWD))
sys.path.append(BASE_DIR)

from bahai_calendar import BahaiCalendar, GregorianCalendar


class DateTests(BahaiCalendar):
    # The following three must be updated in unison.
    # This must be the first Gregorian date in TMP_ANS_DATES below.
    TRAN_COFF = 1843
    # https://www.timeanddate.com/sun/@112931?month=3&year=1844
    # The site below is where I've gotten the Vernal Equinox data it uses
    # the 4, 100, and 400 algorithm, so we must also. The 4 and 128 algorithm
    # is more accurate, but I've not found Vernal Equinox data that uses it.
    # https://data.giss.nasa.gov/modelE/ar5plots/srvernal.html
    # https://aa.usno.navy.mil/data/JulianDate
    # https://aa.usno.navy.mil/data/RS_OneYear  # Sunrise & Sunset
    # https://www.sunrisesunset.com/England/GreaterLondon/Greenwich.asp
    # https://gml.noaa.gov/grad/solcalc/ # Sunrise and Sunset
    # Tehran: 35.696111 (35, 41, 45.9996), 51.423056 (51, 25, 23.0016)
    # Nur Mazandaran Province, Iran (City Center)
    # Nur: 36.569336, 52.0050234
    # I use coordinates and the sunset in the city of Nur to determine the
    # yearly Badi epoch.
    TMP_ANS_DATES = (
        (   1, 3, 20, 18, 13), (   2, 3, 21, 18, 14), (   3, 3, 21, 18, 14),
        (   4, 3, 20, 18, 14), (   5, 3, 20, 18, 13), (   6, 3, 21, 18, 14),
        (   7, 3, 21, 18, 14), (   8, 3, 20, 18, 14), (   9, 3, 20, 18, 14),
        (  10, 3, 21, 18, 14), (  11, 3, 21, 18, 14), (  12, 3, 20, 18, 14),
        (  13, 3, 20), (  14, 3, 21), (  15, 3, 21), (  16, 3, 20),
        (  17, 3, 20), (  18, 3, 21), (  19, 3, 21), (  20, 3, 20),
        (  21, 3, 20), (  22, 3, 21), (  23, 3, 21), (  24, 3, 20),
        (  25, 3, 20), (  26, 3, 20), (  27, 3, 21), (  28, 3, 20),
        (  29, 3, 20), (  30, 3, 20), (  31, 3, 21), (  32, 3, 20),
        (  33, 3, 20), (  34, 3, 20), (  35, 3, 21), (  36, 3, 20),
        (  37, 3, 20), (  38, 3, 20), (  39, 3, 21), (  40, 3, 20),
        (  41, 3, 20), (  42, 3, 20), (  43, 3, 21), (  44, 3, 20),
        (  45, 3, 20), (  46, 3, 20), (  47, 3, 21), (  48, 3, 20),
        (  49, 3, 20), (  50, 3, 20), (  51, 3, 21), (  52, 3, 20),
        (  53, 3, 20), (  54, 3, 20), (  55, 3, 21), (  56, 3, 20),
        (  57, 3, 20), (  58, 3, 20), (  59, 3, 21), (  60, 3, 20),
        (  61, 3, 20), (  62, 3, 20), (  63, 3, 20), (  64, 3, 20),
        (  65, 3, 20), (  66, 3, 20), (  67, 3, 20), (  68, 3, 20),
        (  69, 3, 20), (  70, 3, 20), (  71, 3, 20), (  72, 3, 20),
        (  73, 3, 20), (  74, 3, 20), (  75, 3, 20), (  76, 3, 20),
        (  77, 3, 20), (  78, 3, 20), (  79, 3, 20), (  80, 3, 20),
        (  81, 3, 20), (  82, 3, 20), (  83, 3, 20), (  84, 3, 20),
        (  85, 3, 20), (  86, 3, 20), (  87, 3, 20), (  88, 3, 20),
        (  89, 3, 20), (  90, 3, 20), (  91, 3, 20), (  92, 3, 20),
        (  93, 3, 20), (  94, 3, 20), (  95, 3, 20), (  96, 3, 19),
        (  97, 3, 20), (  98, 3, 20), (  99, 3, 20), ( 100, 3, 20),
        ( 101, 3, 21), ( 102, 3, 21), ( 103, 3, 21), ( 104, 3, 20),
        ( 105, 3, 21), ( 106, 3, 21), ( 107, 3, 21), ( 108, 3, 20),
        ( 109, 3, 21), ( 110, 3, 21), ( 111, 3, 21), ( 112, 3, 20),
        ( 113, 3, 21), ( 114, 3, 21), ( 115, 3, 21), ( 116, 3, 20),
        ( 117, 3, 21), ( 118, 3, 21), ( 119, 3, 21), ( 120, 3, 20),
        ( 121, 3, 21), ( 122, 3, 21), ( 123, 3, 21), ( 124, 3, 20),
        ( 125, 3, 21), ( 126, 3, 21), ( 127, 3, 21), ( 128, 3, 20),
        ( 129, 3, 20), ( 130, 3, 21), ( 131, 3, 21), ( 132, 3, 20),
        ( 133, 3, 20), ( 134, 3, 21), ( 135, 3, 21), ( 136, 3, 20),
        ( 137, 3, 20), ( 138, 3, 21), ( 139, 3, 21), ( 140, 3, 20),
        ( 141, 3, 20), ( 142, 3, 21), ( 143, 3, 21), ( 144, 3, 20),
        ( 145, 3, 20), ( 146, 3, 21), ( 147, 3, 21), ( 148, 3, 20),
        ( 149, 3, 20), ( 150, 3, 21), ( 151, 3, 21), ( 152, 3, 20),
        ( 153, 3, 20), ( 154, 3, 21), ( 155, 3, 21), ( 156, 3, 20),
        ( 157, 3, 20), ( 158, 3, 20), ( 159, 3, 21), ( 160, 3, 20),
        ( 161, 3, 20), ( 162, 3, 20), ( 163, 3, 21), ( 164, 3, 20),
        ( 165, 3, 20), ( 166, 3, 20), ( 167, 3, 21), ( 168, 3, 20),
        ( 169, 3, 20), ( 170, 3, 20), ( 171, 3, 21), ( 172, 3, 20),
        ( 173, 3, 20), ( 174, 3, 20), ( 175, 3, 21), ( 176, 3, 20),
        ( 177, 3, 20), ( 178, 3, 20), ( 179, 3, 21), ( 180, 3, 20),
        ( 181, 3, 20), ( 182, 3, 20), ( 183, 3, 21), ( 184, 3, 20),
        ( 185, 3, 20), ( 186, 3, 20), ( 187, 3, 21), ( 188, 3, 20),
        ( 189, 3, 20), ( 190, 3, 20), ( 191, 3, 20), ( 192, 3, 20),
        ( 193, 3, 20), ( 194, 3, 20), ( 195, 3, 20), ( 196, 3, 20),
        ( 197, 3, 20), ( 198, 3, 20), ( 199, 3, 20), ( 200, 3, 21),
        ( 201, 3, 21), ( 202, 3, 21), ( 203, 3, 21), ( 204, 3, 21),
        ( 205, 3, 21), ( 206, 3, 21), ( 207, 3, 21), ( 208, 3, 21),
        ( 209, 3, 21), ( 210, 3, 21), ( 211, 3, 21), ( 212, 3, 21),
        ( 213, 3, 21), ( 214, 3, 21), ( 215, 3, 21), ( 216, 3, 21),
        ( 217, 3, 21), ( 218, 3, 21), ( 219, 3, 21), ( 220, 3, 21),
        ( 221, 3, 21), ( 222, 3, 21), ( 223, 3, 21), ( 224, 3, 21),
        ( 225, 3, 21), ( 226, 3, 21), ( 227, 3, 21), ( 228, 3, 20),
        ( 229, 3, 21), ( 230, 3, 21), ( 231, 3, 21), ( 232, 3, 20),
        ( 233, 3, 21), ( 234, 3, 21), ( 235, 3, 21), ( 236, 3, 20),
        ( 237, 3, 21), ( 238, 3, 21), ( 239, 3, 21), ( 240, 3, 20),
        ( 241, 3, 21), ( 242, 3, 21), ( 243, 3, 21), ( 244, 3, 20),
        ( 245, 3, 21), ( 246, 3, 21), ( 247, 3, 21), ( 248, 3, 20),
        ( 249, 3, 21), ( 250, 3, 21), ( 251, 3, 21), ( 252, 3, 20),
        ( 253, 3, 21), ( 254, 3, 21), ( 255, 3, 21), ( 256, 3, 20),
        ( 257, 3, 21), ( 258, 3, 21), ( 259, 3, 21), ( 260, 3, 20),
        ( 261, 3, 20), ( 262, 3, 21), ( 263, 3, 21), ( 264, 3, 20),
        ( 265, 3, 20), ( 266, 3, 21), ( 267, 3, 21), ( 268, 3, 20),
        ( 269, 3, 20), ( 270, 3, 21), ( 271, 3, 21), ( 272, 3, 20),
        ( 273, 3, 20), ( 274, 3, 21), ( 275, 3, 21), ( 276, 3, 20),
        ( 277, 3, 20), ( 278, 3, 21), ( 279, 3, 21), ( 280, 3, 20),
        ( 281, 3, 20), ( 282, 3, 21), ( 283, 3, 21), ( 284, 3, 20),
        ( 285, 3, 20), ( 286, 3, 21), ( 287, 3, 21), ( 288, 3, 20),
        ( 289, 3, 20), ( 290, 3, 21), ( 291, 3, 21), ( 292, 3, 20),
        ( 293, 3, 20), ( 294, 3, 20), ( 295, 3, 21), ( 296, 3, 20),
        ( 297, 3, 20), ( 298, 3, 20), ( 299, 3, 21), ( 300, 3, 21),
        ( 301, 3, 21), ( 302, 3, 21), ( 303, 3, 22), ( 304, 3, 21),
        ( 305, 3, 21), ( 306, 3, 21), ( 307, 3, 22), ( 308, 3, 21),
        ( 309, 3, 21), ( 310, 3, 21), ( 311, 3, 22), ( 312, 3, 21),
        ( 313, 3, 21), ( 314, 3, 21), ( 315, 3, 22), ( 316, 3, 21),
        ( 317, 3, 21), ( 318, 3, 21), ( 319, 3, 22), ( 320, 3, 21),
        ( 321, 3, 21), ( 322, 3, 21), ( 323, 3, 22), ( 324, 3, 21),
        ( 325, 3, 21), ( 326, 3, 21), ( 327, 3, 21), ( 328, 3, 21),
        ( 329, 3, 21), ( 330, 3, 21), ( 331, 3, 21), ( 332, 3, 21),
        ( 333, 3, 21), ( 334, 3, 21), ( 335, 3, 21), ( 336, 3, 21),
        ( 337, 3, 21), ( 338, 3, 21), ( 339, 3, 21), ( 340, 3, 21),
        ( 341, 3, 21), ( 342, 3, 21), ( 343, 3, 21), ( 344, 3, 21),
        ( 345, 3, 21), ( 346, 3, 21), ( 347, 3, 21), ( 348, 3, 21),
        ( 349, 3, 21), ( 350, 3, 21), ( 351, 3, 21), ( 352, 3, 21),
        ( 353, 3, 21), ( 354, 3, 21), ( 355, 3, 21), ( 356, 3, 21),
        ( 357, 3, 21), ( 358, 3, 21), ( 359, 3, 21), ( 360, 3, 21),
        ( 361, 3, 21), ( 362, 3, 21), ( 363, 3, 21), ( 364, 3, 20),
        ( 365, 3, 21), ( 366, 3, 21), ( 367, 3, 21), ( 368, 3, 20),
        ( 369, 3, 21), ( 370, 3, 21), ( 371, 3, 21), ( 372, 3, 20),
        ( 373, 3, 21), ( 374, 3, 21), ( 375, 3, 21), ( 376, 3, 20),
        ( 377, 3, 21), ( 378, 3, 21), ( 379, 3, 21), ( 380, 3, 20),
        ( 381, 3, 21), ( 382, 3, 21), ( 383, 3, 21), ( 384, 3, 20),
        ( 385, 3, 21), ( 386, 3, 21), ( 387, 3, 21), ( 388, 3, 20),
        ( 389, 3, 21), ( 390, 3, 21), ( 391, 3, 21), ( 392, 3, 20),
        ( 393, 3, 21), ( 394, 3, 21), ( 395, 3, 21), ( 396, 3, 20),
        ( 397, 3, 20), ( 398, 3, 21), ( 399, 3, 21), ( 400, 3, 20),
        ( 401, 3, 20), ( 402, 3, 21), ( 403, 3, 21), ( 404, 3, 20),
        ( 405, 3, 20), ( 406, 3, 21), ( 407, 3, 21), ( 408, 3, 20),
        ( 409, 3, 20), ( 410, 3, 21), ( 411, 3, 21), ( 412, 3, 20),
        ( 413, 3, 20), ( 414, 3, 21), ( 415, 3, 21), ( 416, 3, 20),
        ( 417, 3, 20), ( 418, 3, 21), ( 419, 3, 21), ( 420, 3, 20),
        ( 421, 3, 20), ( 422, 3, 21), ( 423, 3, 21), ( 424, 3, 20),
        ( 425, 3, 20), ( 426, 3, 21), ( 427, 3, 21), ( 428, 3, 20),
        ( 429, 3, 20), ( 430, 3, 20), ( 431, 3, 21), ( 432, 3, 20),
        ( 433, 3, 20), ( 434, 3, 20), ( 435, 3, 21), ( 436, 3, 20),
        ( 437, 3, 20), ( 438, 3, 20), ( 439, 3, 21), ( 440, 3, 20),
        ( 441, 3, 20), ( 442, 3, 20), ( 443, 3, 21), ( 444, 3, 20),
        ( 445, 3, 20), ( 446, 3, 20), ( 447, 3, 21), ( 448, 3, 20),
        ( 449, 3, 20), ( 450, 3, 20), ( 451, 3, 21), ( 452, 3, 20),
        ( 453, 3, 20), ( 454, 3, 20), ( 455, 3, 21), ( 456, 3, 20),
        ( 457, 3, 20), ( 458, 3, 20), ( 459, 3, 20), ( 460, 3, 20),
        ( 461, 3, 20), ( 462, 3, 20), ( 463, 3, 20), ( 464, 3, 20),
        ( 465, 3, 20), ( 466, 3, 20), ( 467, 3, 20), ( 468, 3, 20),
        ( 469, 3, 20), ( 470, 3, 20), ( 471, 3, 20), ( 472, 3, 20),
        ( 473, 3, 20), ( 474, 3, 20), ( 475, 3, 20), ( 476, 3, 20),
        ( 477, 3, 20), ( 478, 3, 20), ( 479, 3, 20), ( 480, 3, 20),
        ( 481, 3, 20), ( 482, 3, 20), ( 483, 3, 20), ( 484, 3, 20),
        ( 485, 3, 20), ( 486, 3, 20), ( 487, 3, 20), ( 488, 3, 20),
        ( 489, 3, 20), ( 490, 3, 20), ( 491, 3, 20), ( 492, 3, 20),
        ( 493, 3, 20), ( 494, 3, 20), ( 495, 3, 20), ( 496, 3, 19),
        ( 497, 3, 20), ( 498, 3, 20), ( 499, 3, 20), ( 500, 3, 20),
        ( 501, 3, 21), ( 502, 3, 21), ( 503, 3, 21), ( 504, 3, 20),
        ( 505, 3, 21), ( 506, 3, 21), ( 507, 3, 21), ( 508, 3, 20),
        ( 509, 3, 21), ( 510, 3, 21), ( 511, 3, 21), ( 512, 3, 20),
        ( 513, 3, 21), ( 514, 3, 21), ( 515, 3, 21), ( 516, 3, 20),
        ( 517, 3, 21), ( 518, 3, 21), ( 519, 3, 21), ( 520, 3, 20),
        ( 521, 3, 21), ( 522, 3, 21), ( 523, 3, 21), ( 524, 3, 20),
        ( 525, 3, 21), ( 526, 3, 21), ( 527, 3, 21), ( 528, 3, 20),
        ( 529, 3, 20), ( 530, 3, 21), ( 531, 3, 21), ( 532, 3, 20),
        ( 533, 3, 20), ( 534, 3, 21), ( 535, 3, 21), ( 536, 3, 20),
        ( 537, 3, 20), ( 538, 3, 21), ( 539, 3, 21), ( 540, 3, 20),
        ( 541, 3, 20), ( 542, 3, 21), ( 543, 3, 21), ( 544, 3, 20),
        ( 545, 3, 20), ( 546, 3, 21), ( 547, 3, 21), ( 548, 3, 20),
        ( 549, 3, 20), ( 550, 3, 21), ( 551, 3, 21), ( 552, 3, 20),
        ( 553, 3, 20), ( 554, 3, 21), ( 555, 3, 21), ( 556, 3, 20),
        ( 557, 3, 20), ( 558, 3, 21), ( 559, 3, 21), ( 560, 3, 20),
        ( 561, 3, 20), ( 562, 3, 20), ( 563, 3, 21), ( 564, 3, 20),
        ( 565, 3, 20), ( 566, 3, 20), ( 567, 3, 21), ( 568, 3, 20),
        ( 569, 3, 20), ( 570, 3, 20), ( 571, 3, 21), ( 572, 3, 20),
        ( 573, 3, 20), ( 574, 3, 20), ( 575, 3, 21), ( 576, 3, 20),
        ( 577, 3, 20), ( 578, 3, 20), ( 579, 3, 21), ( 580, 3, 20),
        ( 581, 3, 20), ( 582, 3, 20), ( 583, 3, 21), ( 584, 3, 20),
        ( 585, 3, 20), ( 586, 3, 20), ( 587, 3, 21), ( 588, 3, 20),
        ( 589, 3, 20), ( 590, 3, 20), ( 591, 3, 21), ( 592, 3, 20),
        ( 593, 3, 20), ( 594, 3, 20), ( 595, 3, 20), ( 596, 3, 20),
        ( 597, 3, 20), ( 598, 3, 20), ( 599, 3, 20), ( 600, 3, 21),
        ( 601, 3, 21), ( 602, 3, 21), ( 603, 3, 21), ( 604, 3, 21),
        ( 605, 3, 21), ( 606, 3, 21), ( 607, 3, 21), ( 608, 3, 21),
        ( 609, 3, 21), ( 610, 3, 21), ( 611, 3, 21), ( 612, 3, 21),
        ( 613, 3, 21), ( 614, 3, 21), ( 615, 3, 21), ( 616, 3, 21),
        ( 617, 3, 21), ( 618, 3, 21), ( 619, 3, 21), ( 620, 3, 21),
        ( 621, 3, 21), ( 622, 3, 21), ( 623, 3, 21), ( 624, 3, 21),
        ( 625, 3, 21), ( 626, 3, 21), ( 627, 3, 21), ( 628, 3, 20),
        ( 629, 3, 21), ( 630, 3, 21), ( 631, 3, 21), ( 632, 3, 20),
        ( 633, 3, 21), ( 634, 3, 21), ( 635, 3, 21), ( 636, 3, 20),
        ( 637, 3, 21), ( 638, 3, 21), ( 639, 3, 21), ( 640, 3, 20),
        ( 641, 3, 21), ( 642, 3, 21), ( 643, 3, 21), ( 644, 3, 20),
        ( 645, 3, 21), ( 646, 3, 21), ( 647, 3, 21), ( 648, 3, 20),
        ( 649, 3, 21), ( 650, 3, 21), ( 651, 3, 21), ( 652, 3, 20),
        ( 653, 3, 21), ( 654, 3, 21), ( 655, 3, 21), ( 656, 3, 20),
        ( 657, 3, 21), ( 658, 3, 21), ( 659, 3, 21), ( 660, 3, 20),
        ( 661, 3, 20), ( 662, 3, 21), ( 663, 3, 21), ( 664, 3, 20),
        ( 665, 3, 20), ( 666, 3, 21), ( 667, 3, 21), ( 668, 3, 20),
        ( 669, 3, 20), ( 670, 3, 21), ( 671, 3, 21), ( 672, 3, 20),
        ( 673, 3, 20), ( 674, 3, 21), ( 675, 3, 21), ( 676, 3, 20),
        ( 677, 3, 20), ( 678, 3, 21), ( 679, 3, 21), ( 680, 3, 20),
        ( 681, 3, 20), ( 682, 3, 21), ( 683, 3, 21), ( 684, 3, 20),
        ( 685, 3, 20), ( 686, 3, 21), ( 687, 3, 21), ( 688, 3, 20),
        ( 689, 3, 20), ( 690, 3, 21), ( 691, 3, 21), ( 692, 3, 20),
        ( 693, 3, 20), ( 694, 3, 20), ( 695, 3, 21), ( 696, 3, 20),
        ( 697, 3, 20), ( 698, 3, 20), ( 699, 3, 21), ( 700, 3, 21),
        ( 701, 3, 21), ( 702, 3, 21), ( 703, 3, 22), ( 704, 3, 21),
        ( 705, 3, 21), ( 706, 3, 21), ( 707, 3, 22), ( 708, 3, 21),
        ( 709, 3, 21), ( 710, 3, 21), ( 711, 3, 22), ( 712, 3, 21),
        ( 713, 3, 21), ( 714, 3, 21), ( 715, 3, 22), ( 716, 3, 21),
        ( 717, 3, 21), ( 718, 3, 21), ( 719, 3, 22), ( 720, 3, 21),
        ( 721, 3, 21), ( 722, 3, 21), ( 723, 3, 22), ( 724, 3, 21),
        ( 725, 3, 21), ( 726, 3, 21), ( 727, 3, 21), ( 728, 3, 21),
        ( 729, 3, 21), ( 730, 3, 21), ( 731, 3, 21), ( 732, 3, 21),
        ( 733, 3, 21), ( 734, 3, 21), ( 735, 3, 21), ( 736, 3, 21),
        ( 737, 3, 21), ( 738, 3, 21), ( 739, 3, 21), ( 740, 3, 21),
        ( 741, 3, 21), ( 742, 3, 21), ( 743, 3, 21), ( 744, 3, 21),
        ( 745, 3, 21), ( 746, 3, 21), ( 747, 3, 21), ( 748, 3, 21),
        ( 749, 3, 21), ( 750, 3, 21), ( 751, 3, 21), ( 752, 3, 21),
        ( 753, 3, 21), ( 754, 3, 21), ( 755, 3, 21), ( 756, 3, 21),
        ( 757, 3, 21), ( 758, 3, 21), ( 759, 3, 21), ( 760, 3, 21),
        ( 761, 3, 21), ( 762, 3, 21), ( 763, 3, 21), ( 764, 3, 20),
        ( 765, 3, 21), ( 766, 3, 21), ( 767, 3, 21), ( 768, 3, 20),
        ( 769, 3, 21), ( 770, 3, 21), ( 771, 3, 21), ( 772, 3, 20),
        ( 773, 3, 21), ( 774, 3, 21), ( 775, 3, 21), ( 776, 3, 20),
        ( 777, 3, 21), ( 778, 3, 21), ( 779, 3, 21), ( 780, 3, 20),
        ( 781, 3, 21), ( 782, 3, 21), ( 783, 3, 21), ( 784, 3, 20),
        ( 785, 3, 21), ( 786, 3, 21), ( 787, 3, 21), ( 788, 3, 20),
        ( 789, 3, 21), ( 790, 3, 21), ( 791, 3, 21), ( 792, 3, 20),
        ( 793, 3, 20), ( 794, 3, 21), ( 795, 3, 21), ( 796, 3, 20),
        ( 797, 3, 20), ( 798, 3, 21), ( 799, 3, 21), ( 800, 3, 20),
        ( 801, 3, 20), ( 802, 3, 21), ( 803, 3, 21), ( 804, 3, 20),
        ( 805, 3, 20), ( 806, 3, 21), ( 807, 3, 21), ( 808, 3, 20),
        ( 809, 3, 20), ( 810, 3, 21), ( 811, 3, 21), ( 812, 3, 20),
        ( 813, 3, 20), ( 814, 3, 21), ( 815, 3, 21), ( 816, 3, 20),
        ( 817, 3, 20), ( 818, 3, 21), ( 819, 3, 21), ( 820, 3, 20),
        ( 821, 3, 20), ( 822, 3, 21), ( 823, 3, 21), ( 824, 3, 20),
        ( 825, 3, 20), ( 826, 3, 20), ( 827, 3, 21), ( 828, 3, 20),
        ( 829, 3, 20), ( 830, 3, 20), ( 831, 3, 21), ( 832, 3, 20),
        ( 833, 3, 20), ( 834, 3, 20), ( 835, 3, 21), ( 836, 3, 20),
        ( 837, 3, 20), ( 838, 3, 20), ( 839, 3, 21), ( 840, 3, 20),
        ( 841, 3, 20), ( 842, 3, 20), ( 843, 3, 21), ( 844, 3, 20),
        ( 845, 3, 20), ( 846, 3, 20), ( 847, 3, 21), ( 848, 3, 20),
        ( 849, 3, 20), ( 850, 3, 20), ( 851, 3, 21), ( 852, 3, 20),
        ( 853, 3, 20), ( 854, 3, 20), ( 855, 3, 21), ( 856, 3, 20),
        ( 857, 3, 20), ( 858, 3, 20), ( 859, 3, 20), ( 860, 3, 20),
        ( 861, 3, 20), ( 862, 3, 20), ( 863, 3, 20), ( 864, 3, 20),
        ( 865, 3, 20), ( 866, 3, 20), ( 867, 3, 20), ( 868, 3, 20),
        ( 869, 3, 20), ( 870, 3, 20), ( 871, 3, 20), ( 872, 3, 20),
        ( 873, 3, 20), ( 874, 3, 20), ( 875, 3, 20), ( 876, 3, 20),
        ( 877, 3, 20), ( 878, 3, 20), ( 879, 3, 20), ( 880, 3, 20),
        ( 881, 3, 20), ( 882, 3, 20), ( 883, 3, 20), ( 884, 3, 20),
        ( 885, 3, 20), ( 886, 3, 20), ( 887, 3, 20), ( 888, 3, 20),
        ( 889, 3, 20), ( 890, 3, 20), ( 891, 3, 20), ( 892, 3, 20),
        ( 893, 3, 20), ( 894, 3, 20), ( 895, 3, 20), ( 896, 3, 19),
        ( 897, 3, 20), ( 898, 3, 20), ( 899, 3, 20), ( 900, 3, 20),
        ( 901, 3, 21), ( 902, 3, 21), ( 903, 3, 21), ( 904, 3, 20),
        ( 905, 3, 21), ( 906, 3, 21), ( 907, 3, 21), ( 908, 3, 20),
        ( 909, 3, 21), ( 910, 3, 21), ( 911, 3, 21), ( 912, 3, 20),
        ( 913, 3, 21), ( 914, 3, 21), ( 915, 3, 21), ( 916, 3, 20),
        ( 917, 3, 21), ( 918, 3, 21), ( 919, 3, 21), ( 920, 3, 20),
        ( 921, 3, 21), ( 922, 3, 21), ( 923, 3, 21), ( 924, 3, 20),
        ( 925, 3, 21), ( 926, 3, 21), ( 927, 3, 21), ( 928, 3, 20),
        ( 929, 3, 20), ( 930, 3, 21), ( 931, 3, 21), ( 932, 3, 20),
        ( 933, 3, 20), ( 934, 3, 21), ( 935, 3, 21), ( 936, 3, 20),
        ( 937, 3, 20), ( 938, 3, 21), ( 939, 3, 21), ( 940, 3, 20),
        ( 941, 3, 20), ( 942, 3, 21), ( 943, 3, 21), ( 944, 3, 20),
        ( 945, 3, 20), ( 946, 3, 21), ( 947, 3, 21), ( 948, 3, 20),
        ( 949, 3, 20), ( 950, 3, 21), ( 951, 3, 21), ( 952, 3, 20),
        ( 953, 3, 20), ( 954, 3, 21), ( 955, 3, 21), ( 956, 3, 20),
        ( 957, 3, 20), ( 958, 3, 21), ( 959, 3, 21), ( 960, 3, 20),
        ( 961, 3, 20), ( 962, 3, 20), ( 963, 3, 21), ( 964, 3, 20),
        ( 965, 3, 20), ( 966, 3, 20), ( 967, 3, 21), ( 968, 3, 20),
        ( 969, 3, 20), ( 970, 3, 20), ( 971, 3, 21), ( 972, 3, 20),
        ( 973, 3, 20), ( 974, 3, 20), ( 975, 3, 21), ( 976, 3, 20),
        ( 977, 3, 20), ( 978, 3, 20), ( 979, 3, 21), ( 980, 3, 20),
        ( 981, 3, 20), ( 982, 3, 20), ( 983, 3, 21), ( 984, 3, 20),
        ( 985, 3, 20), ( 986, 3, 20), ( 987, 3, 21), ( 988, 3, 20),
        ( 989, 3, 20), ( 990, 3, 20), ( 991, 3, 21), ( 992, 3, 20),
        ( 993, 3, 20), ( 994, 3, 20), ( 995, 3, 20), ( 996, 3, 20),
        ( 997, 3, 20), ( 998, 3, 20), ( 999, 3, 20), (1000, 3, 21),
        (1001, 3, 21), (1002, 3, 21), (1003, 3, 21), (1004, 3, 21),
        (1005, 3, 21), (1006, 3, 21), (1007, 3, 21), (1008, 3, 21),
        (1009, 3, 21), (1010, 3, 21), (1011, 3, 21), (1012, 3, 21),
        (1013, 3, 21), (1014, 3, 21), (1015, 3, 21), (1016, 3, 21),
        (1017, 3, 21), (1018, 3, 21), (1019, 3, 21), (1020, 3, 21),
        (1021, 3, 21), (1022, 3, 21), (1023, 3, 21), (1024, 3, 21),
        (1025, 3, 21), (1026, 3, 21), (1027, 3, 21), (1028, 3, 20),
        (1029, 3, 21), (1030, 3, 21), (1031, 3, 21), (1032, 3, 20),
        (1033, 3, 21), (1034, 3, 21), (1035, 3, 21), (1036, 3, 20),
        (1037, 3, 21), (1038, 3, 21), (1039, 3, 21), (1040, 3, 20),
        (1041, 3, 21), (1042, 3, 21), (1043, 3, 21), (1044, 3, 20),
        (1045, 3, 21), (1046, 3, 21), (1047, 3, 21), (1048, 3, 20),
        (1049, 3, 21), (1050, 3, 21), (1051, 3, 21), (1052, 3, 20),
        (1053, 3, 21), (1054, 3, 21), (1055, 3, 21), (1056, 3, 20),
        (1057, 3, 21), (1058, 3, 21), (1059, 3, 21), (1060, 3, 20),
        (1061, 3, 20), (1062, 3, 21), (1063, 3, 21), (1064, 3, 20),
        (1065, 3, 20), (1066, 3, 21), (1067, 3, 21), (1068, 3, 20),
        (1069, 3, 20), (1070, 3, 21), (1071, 3, 21), (1072, 3, 20),
        (1073, 3, 20), (1074, 3, 21), (1075, 3, 21), (1076, 3, 20),
        (1077, 3, 20), (1078, 3, 21), (1079, 3, 21), (1080, 3, 20),
        (1081, 3, 20), (1082, 3, 21), (1083, 3, 21), (1084, 3, 20),
        (1085, 3, 20), (1086, 3, 21), (1087, 3, 21), (1088, 3, 20),
        (1089, 3, 20), (1090, 3, 21), (1091, 3, 21), (1092, 3, 20),
        (1093, 3, 20), (1094, 3, 20), (1095, 3, 21), (1096, 3, 20),
        (1097, 3, 20), (1098, 3, 20), (1099, 3, 21), (1100, 3, 21),
        (1101, 3, 21), (1102, 3, 21), (1103, 3, 22), (1104, 3, 21),
        (1105, 3, 21), (1106, 3, 21), (1107, 3, 22), (1108, 3, 21),
        (1109, 3, 21), (1110, 3, 21), (1111, 3, 22), (1112, 3, 21),
        (1113, 3, 21), (1114, 3, 21), (1115, 3, 22), (1116, 3, 21),
        (1117, 3, 21), (1118, 3, 21), (1119, 3, 22), (1120, 3, 21),
        (1121, 3, 21), (1122, 3, 21), (1123, 3, 22), (1124, 3, 21),
        (1125, 3, 21), (1126, 3, 21), (1127, 3, 21), (1128, 3, 21),
        (1129, 3, 21), (1130, 3, 21), (1131, 3, 21), (1132, 3, 21),
        (1133, 3, 21), (1134, 3, 21), (1135, 3, 21), (1136, 3, 21),
        (1137, 3, 21), (1138, 3, 21), (1139, 3, 21), (1140, 3, 21),
        (1141, 3, 21), (1142, 3, 21), (1143, 3, 21), (1144, 3, 21),
        (1145, 3, 21), (1146, 3, 21), (1147, 3, 21), (1148, 3, 21),
        (1149, 3, 21), (1150, 3, 21), (1151, 3, 21), (1152, 3, 21),
        (1153, 3, 21), (1154, 3, 21), (1155, 3, 21), (1156, 3, 21),
        (1157, 3, 21), (1158, 3, 21), (1159, 3, 21), (1160, 3, 20),
        (1161, 3, 21), (1162, 3, 21), (1163, 3, 21), (1164, 3, 20),
        (1165, 3, 21), (1166, 3, 21), (1167, 3, 21), (1168, 3, 20),
        (1169, 3, 21), (1170, 3, 21), (1171, 3, 21), (1172, 3, 20),
        (1173, 3, 21), (1174, 3, 21), (1175, 3, 21), (1176, 3, 20),
        (1177, 3, 21), (1178, 3, 21), (1179, 3, 21), (1180, 3, 20),
        (1181, 3, 21), (1182, 3, 21), (1183, 3, 21), (1184, 3, 20),
        (1185, 3, 21), (1186, 3, 21), (1187, 3, 21), (1188, 3, 20),
        (1189, 3, 21), (1190, 3, 21), (1191, 3, 21), (1192, 3, 20),
        (1193, 3, 20), (1194, 3, 21), (1195, 3, 21), (1196, 3, 20),
        (1197, 3, 20), (1198, 3, 21), (1199, 3, 21), (1200, 3, 20),
        (1201, 3, 20), (1202, 3, 21), (1203, 3, 21), (1204, 3, 20),
        (1205, 3, 20), (1206, 3, 21), (1207, 3, 21), (1208, 3, 20),
        (1209, 3, 20), (1210, 3, 21), (1211, 3, 21), (1212, 3, 20),
        (1213, 3, 20), (1214, 3, 21), (1215, 3, 21), (1216, 3, 20),
        (1217, 3, 20), (1218, 3, 21), (1219, 3, 21), (1220, 3, 20),
        (1221, 3, 20), (1222, 3, 21), (1223, 3, 21), (1224, 3, 20),
        (1225, 3, 20), (1226, 3, 20), (1227, 3, 21), (1228, 3, 20),
        (1229, 3, 20), (1230, 3, 20), (1231, 3, 21), (1232, 3, 20),
        (1233, 3, 20), (1234, 3, 20), (1235, 3, 21), (1236, 3, 20),
        (1237, 3, 20), (1238, 3, 20), (1239, 3, 21), (1240, 3, 20),
        (1241, 3, 20), (1242, 3, 20), (1243, 3, 21), (1244, 3, 20),
        (1245, 3, 20), (1246, 3, 20), (1247, 3, 21), (1248, 3, 20),
        (1249, 3, 20), (1250, 3, 20), (1251, 3, 21), (1252, 3, 20),
        (1253, 3, 20), (1254, 3, 20), (1255, 3, 21), (1256, 3, 20),
        (1257, 3, 20), (1258, 3, 20), (1259, 3, 20), (1260, 3, 20),
        (1261, 3, 20), (1262, 3, 20), (1263, 3, 20), (1264, 3, 20),
        (1265, 3, 20), (1266, 3, 20), (1267, 3, 20), (1268, 3, 20),
        (1269, 3, 20), (1270, 3, 20), (1271, 3, 20), (1272, 3, 20),
        (1273, 3, 20), (1274, 3, 20), (1275, 3, 20), (1276, 3, 20),
        (1277, 3, 20), (1278, 3, 20), (1279, 3, 20), (1280, 3, 20),
        (1281, 3, 20), (1282, 3, 20), (1283, 3, 20), (1284, 3, 20),
        (1285, 3, 20), (1286, 3, 20), (1287, 3, 20), (1288, 3, 20),
        (1289, 3, 20), (1290, 3, 20), (1291, 3, 20), (1292, 3, 20),
        (1293, 3, 20), (1294, 3, 20), (1295, 3, 20), (1296, 3, 19),
        (1297, 3, 20), (1298, 3, 20), (1299, 3, 20), (1300, 3, 20),
        (1301, 3, 21), (1302, 3, 21), (1303, 3, 21), (1304, 3, 20),
        (1305, 3, 21), (1306, 3, 21), (1307, 3, 21), (1308, 3, 20),
        (1309, 3, 21), (1310, 3, 21), (1311, 3, 21), (1312, 3, 20),
        (1313, 3, 21), (1314, 3, 21), (1315, 3, 21), (1316, 3, 20),
        (1317, 3, 21), (1318, 3, 21), (1319, 3, 21), (1320, 3, 20),
        (1321, 3, 21), (1322, 3, 21), (1323, 3, 21), (1324, 3, 20),
        (1325, 3, 21), (1326, 3, 21), (1327, 3, 21), (1328, 3, 20),
        (1329, 3, 20), (1330, 3, 21), (1331, 3, 21), (1332, 3, 20),
        (1333, 3, 20), (1334, 3, 21), (1335, 3, 21), (1336, 3, 20),
        (1337, 3, 20), (1338, 3, 21), (1339, 3, 21), (1340, 3, 20),
        (1341, 3, 20), (1342, 3, 21), (1343, 3, 21), (1344, 3, 20),
        (1345, 3, 20), (1346, 3, 21), (1347, 3, 21), (1348, 3, 20),
        (1349, 3, 20), (1350, 3, 21), (1351, 3, 21), (1352, 3, 20),
        (1353, 3, 20), (1354, 3, 21), (1355, 3, 21), (1356, 3, 20),
        (1357, 3, 20), (1358, 3, 21), (1359, 3, 21), (1360, 3, 20),
        (1361, 3, 20), (1362, 3, 20), (1363, 3, 21), (1364, 3, 20),
        (1365, 3, 20), (1366, 3, 20), (1367, 3, 21), (1368, 3, 20),
        (1369, 3, 20), (1370, 3, 20), (1371, 3, 21), (1372, 3, 20),
        (1373, 3, 20), (1374, 3, 20), (1375, 3, 21), (1376, 3, 20),
        (1377, 3, 20), (1378, 3, 20), (1379, 3, 21), (1380, 3, 20),
        (1381, 3, 20), (1382, 3, 20), (1383, 3, 21), (1384, 3, 20),
        (1385, 3, 20), (1386, 3, 20), (1387, 3, 21), (1388, 3, 20),
        (1389, 3, 20), (1390, 3, 20), (1391, 3, 21), (1392, 3, 20),
        (1393, 3, 20), (1394, 3, 20), (1395, 3, 20), (1396, 3, 20),
        (1397, 3, 20), (1398, 3, 20), (1399, 3, 20), (1400, 3, 21),
        (1401, 3, 21), (1402, 3, 21), (1403, 3, 21), (1404, 3, 21),
        (1405, 3, 21), (1406, 3, 21), (1407, 3, 21), (1408, 3, 21),
        (1409, 3, 21), (1410, 3, 21), (1411, 3, 21), (1412, 3, 21),
        (1413, 3, 21), (1414, 3, 21), (1415, 3, 21), (1416, 3, 21),
        (1417, 3, 21), (1418, 3, 21), (1419, 3, 21), (1420, 3, 21),
        (1421, 3, 21), (1422, 3, 21), (1423, 3, 21), (1424, 3, 21),
        (1425, 3, 21), (1426, 3, 21), (1427, 3, 21), (1428, 3, 20),
        (1429, 3, 21), (1430, 3, 21), (1431, 3, 21), (1432, 3, 20),
        (1433, 3, 21), (1434, 3, 21), (1435, 3, 21), (1436, 3, 20),
        (1437, 3, 21), (1438, 3, 21), (1439, 3, 21), (1440, 3, 20),
        (1441, 3, 21), (1442, 3, 21), (1443, 3, 21), (1444, 3, 20),
        (1445, 3, 21), (1446, 3, 21), (1447, 3, 21), (1448, 3, 20),
        (1449, 3, 21), (1450, 3, 21), (1451, 3, 21), (1452, 3, 20),
        (1453, 3, 21), (1454, 3, 21), (1455, 3, 21), (1456, 3, 20),
        (1457, 3, 21), (1458, 3, 21), (1459, 3, 21), (1460, 3, 20),
        (1461, 3, 20), (1462, 3, 21), (1463, 3, 21), (1464, 3, 20),
        (1465, 3, 20), (1466, 3, 21), (1467, 3, 21), (1468, 3, 20),
        (1469, 3, 20), (1470, 3, 21), (1471, 3, 21), (1472, 3, 20),
        (1473, 3, 20), (1474, 3, 21), (1475, 3, 21), (1476, 3, 20),
        (1477, 3, 20), (1478, 3, 21), (1479, 3, 21), (1480, 3, 20),
        (1481, 3, 20), (1482, 3, 21), (1483, 3, 21), (1484, 3, 20),
        (1485, 3, 20), (1486, 3, 21), (1487, 3, 21), (1488, 3, 20),
        (1489, 3, 20), (1490, 3, 21), (1491, 3, 21), (1492, 3, 20),
        (1493, 3, 20), (1494, 3, 20), (1495, 3, 21), (1496, 3, 20),
        (1497, 3, 20), (1498, 3, 20), (1499, 3, 21), (1500, 3, 21),
        (1501, 3, 21), (1502, 3, 21), (1503, 3, 22), (1504, 3, 21),
        (1505, 3, 21), (1506, 3, 21), (1507, 3, 22), (1508, 3, 21),
        (1509, 3, 21), (1510, 3, 21), (1511, 3, 22), (1512, 3, 21),
        (1513, 3, 21), (1514, 3, 21), (1515, 3, 22), (1516, 3, 21),
        (1517, 3, 21), (1518, 3, 21), (1519, 3, 22), (1520, 3, 21),
        (1521, 3, 21), (1522, 3, 21), (1523, 3, 22), (1524, 3, 21),
        (1525, 3, 21), (1526, 3, 21), (1527, 3, 21), (1528, 3, 21),
        (1529, 3, 21), (1530, 3, 21), (1531, 3, 21), (1532, 3, 21),
        (1533, 3, 21), (1534, 3, 21), (1535, 3, 21), (1536, 3, 21),
        (1537, 3, 21), (1538, 3, 21), (1539, 3, 21), (1540, 3, 21),
        (1541, 3, 21), (1542, 3, 21), (1543, 3, 21), (1544, 3, 21),
        (1545, 3, 21), (1546, 3, 21), (1547, 3, 21), (1548, 3, 21),
        (1549, 3, 21), (1550, 3, 21), (1551, 3, 21), (1552, 3, 21),
        (1553, 3, 21), (1554, 3, 21), (1555, 3, 21), (1556, 3, 21),
        (1557, 3, 21), (1558, 3, 21), (1559, 3, 21), (1560, 3, 21),
        (1561, 3, 21), (1562, 3, 21), (1563, 3, 21), (1564, 3, 20),
        (1565, 3, 21), (1566, 3, 21), (1567, 3, 21), (1568, 3, 20),
        (1569, 3, 21), (1570, 3, 21), (1571, 3, 21), (1572, 3, 20),
        (1573, 3, 21), (1574, 3, 21), (1575, 3, 21), (1576, 3, 20),
        (1577, 3, 21), (1578, 3, 21), (1579, 3, 21), (1580, 3, 20),
        (1581, 3, 21), (1582, 3, 21), (1583, 3, 21), (1584, 3, 20),
        (1585, 3, 21), (1586, 3, 21), (1587, 3, 21), (1588, 3, 20),
        (1589, 3, 21), (1590, 3, 21), (1591, 3, 21), (1592, 3, 20),
        (1593, 3, 21), (1594, 3, 21), (1595, 3, 21), (1596, 3, 20),
        (1597, 3, 20), (1598, 3, 21), (1599, 3, 21), (1600, 3, 20),
        (1601, 3, 20), (1602, 3, 21), (1603, 3, 21), (1604, 3, 20),
        (1605, 3, 20), (1606, 3, 21), (1607, 3, 21), (1608, 3, 20),
        (1609, 3, 20), (1610, 3, 21), (1611, 3, 21), (1612, 3, 20),
        (1613, 3, 20), (1614, 3, 21), (1615, 3, 21), (1616, 3, 20),
        (1617, 3, 20), (1618, 3, 21), (1619, 3, 21), (1620, 3, 20),
        (1621, 3, 20), (1622, 3, 21), (1623, 3, 21), (1624, 3, 20),
        (1625, 3, 20), (1626, 3, 21), (1627, 3, 21), (1628, 3, 20),
        (1629, 3, 20), (1630, 3, 20), (1631, 3, 21), (1632, 3, 20),
        (1633, 3, 20), (1634, 3, 20), (1635, 3, 21), (1636, 3, 20),
        (1637, 3, 20), (1638, 3, 20), (1639, 3, 21), (1640, 3, 20),
        (1641, 3, 20), (1642, 3, 20), (1643, 3, 21), (1644, 3, 20),
        (1645, 3, 20), (1646, 3, 20), (1647, 3, 21), (1648, 3, 20),
        (1649, 3, 20), (1650, 3, 20), (1651, 3, 21), (1652, 3, 20),
        (1653, 3, 20), (1654, 3, 20), (1655, 3, 21), (1656, 3, 20),
        (1657, 3, 20), (1658, 3, 20), (1659, 3, 21), (1660, 3, 20),
        (1661, 3, 20), (1662, 3, 20), (1663, 3, 20), (1664, 3, 20),
        (1665, 3, 20), (1666, 3, 20), (1667, 3, 20), (1668, 3, 20),
        (1669, 3, 20), (1670, 3, 20), (1671, 3, 20), (1672, 3, 20),
        (1673, 3, 20), (1674, 3, 20), (1675, 3, 20), (1676, 3, 20),
        (1677, 3, 20), (1678, 3, 20), (1679, 3, 20), (1680, 3, 20),
        (1681, 3, 20), (1682, 3, 20), (1683, 3, 20), (1684, 3, 20),
        (1685, 3, 20), (1686, 3, 20), (1687, 3, 20), (1688, 3, 20),
        (1689, 3, 20), (1690, 3, 20), (1691, 3, 20), (1692, 3, 20),
        (1693, 3, 20), (1694, 3, 20), (1695, 3, 20), (1696, 3, 19),
        (1697, 3, 20), (1698, 3, 20), (1699, 3, 20), (1700, 3, 20),
        (1701, 3, 21), (1702, 3, 21), (1703, 3, 21), (1704, 3, 20),
        (1705, 3, 21), (1706, 3, 21), (1707, 3, 21), (1708, 3, 20),
        (1709, 3, 21), (1710, 3, 21), (1711, 3, 21), (1712, 3, 20),
        (1713, 3, 21), (1714, 3, 21), (1715, 3, 21), (1716, 3, 20),
        (1717, 3, 21), (1718, 3, 21), (1719, 3, 21), (1720, 3, 20),
        (1721, 3, 21), (1722, 3, 21), (1723, 3, 21), (1724, 3, 20),
        (1725, 3, 21), (1726, 3, 21), (1727, 3, 21), (1728, 3, 20),
        (1729, 3, 20), (1730, 3, 21), (1731, 3, 21), (1732, 3, 20),
        (1733, 3, 20), (1734, 3, 21), (1735, 3, 21), (1736, 3, 20),
        (1737, 3, 20), (1738, 3, 21), (1739, 3, 21), (1740, 3, 20),
        (1741, 3, 20), (1742, 3, 21), (1743, 3, 21), (1744, 3, 20),
        (1745, 3, 20), (1746, 3, 21), (1747, 3, 21), (1748, 3, 20),
        (1749, 3, 20), (1750, 3, 21), (1751, 3, 21), (1752, 3, 20),
        (1753, 3, 20), (1754, 3, 21), (1755, 3, 21), (1756, 3, 20),
        (1757, 3, 20), (1758, 3, 21), (1759, 3, 21), (1760, 3, 20),
        (1761, 3, 20), (1762, 3, 20), (1763, 3, 21), (1764, 3, 20),
        (1765, 3, 20), (1766, 3, 20), (1767, 3, 21), (1768, 3, 20),
        (1769, 3, 20), (1770, 3, 20), (1771, 3, 21), (1772, 3, 20),
        (1773, 3, 20), (1774, 3, 20), (1775, 3, 21), (1776, 3, 20),
        (1777, 3, 20), (1778, 3, 20), (1779, 3, 21), (1780, 3, 20),
        (1781, 3, 20), (1782, 3, 20), (1783, 3, 21), (1784, 3, 20),
        (1785, 3, 20), (1786, 3, 20), (1787, 3, 21), (1788, 3, 20),
        (1789, 3, 20), (1790, 3, 20), (1791, 3, 21), (1792, 3, 20),
        (1793, 3, 20), (1794, 3, 20), (1795, 3, 20), (1796, 3, 20),
        (1797, 3, 20), (1798, 3, 20), (1799, 3, 20), (1800, 3, 21),
        (1801, 3, 21), (1802, 3, 21), (1803, 3, 21), (1804, 3, 21),
        (1805, 3, 21), (1806, 3, 21), (1807, 3, 21), (1808, 3, 21),
        (1809, 3, 21), (1810, 3, 21), (1811, 3, 21), (1812, 3, 21),
        (1813, 3, 21), (1814, 3, 21), (1815, 3, 21), (1816, 3, 21),
        (1817, 3, 21), (1818, 3, 21), (1819, 3, 21), (1820, 3, 21),
        (1821, 3, 21), (1822, 3, 21), (1823, 3, 21), (1824, 3, 21),
        (1825, 3, 21), (1826, 3, 21), (1827, 3, 21), (1828, 3, 20),
        (1829, 3, 21), (1830, 3, 21), (1831, 3, 21), (1832, 3, 20),
        (1833, 3, 21), (1834, 3, 21), (1835, 3, 21), (1836, 3, 20),
        (1837, 3, 21), (1838, 3, 21), (1839, 3, 21), (1840, 3, 20),
        (1841, 3, 21, 18, 14), (1842, 3, 21, 18, 14), (1843, 3, 21, 18, 14),
        # Badi epoch
        (1844, 3, 20, 18, 14), (1845, 3, 21, 18, 14), (1846, 3, 21, 18, 14),
        (1847, 3, 21), (1848, 3, 20), (1849, 3, 21), (1850, 3, 21),
        (1851, 3, 21), (1852, 3, 20), (1853, 3, 21), (1854, 3, 21),
        (1855, 3, 21), (1856, 3, 20), (1857, 3, 21), (1858, 3, 21),
        (1859, 3, 21), (1860, 3, 20), (1861, 3, 20), (1862, 3, 21),
        (1863, 3, 21), (1864, 3, 20), (1865, 3, 20), (1866, 3, 21),
        (1867, 3, 21), (1868, 3, 20), (1869, 3, 20), (1870, 3, 21),
        (1871, 3, 21), (1872, 3, 20), (1873, 3, 20), (1874, 3, 21),
        (1875, 3, 21), (1876, 3, 20), (1877, 3, 20), (1878, 3, 21),
        (1879, 3, 21), (1880, 3, 20), (1881, 3, 20), (1882, 3, 21),
        (1883, 3, 21), (1884, 3, 20), (1885, 3, 20), (1886, 3, 21),
        (1887, 3, 21), (1888, 3, 20), (1889, 3, 20), (1890, 3, 21),
        (1891, 3, 21), (1892, 3, 20), (1893, 3, 20), (1894, 3, 20),
        (1895, 3, 21), (1896, 3, 20), (1897, 3, 20), (1898, 3, 20),
        (1899, 3, 21), (1900, 3, 21), (1901, 3, 21), (1902, 3, 21),
        (1903, 3, 22), (1904, 3, 21), (1905, 3, 21), (1906, 3, 21),
        (1907, 3, 22), (1908, 3, 21), (1909, 3, 21), (1910, 3, 21),
        (1911, 3, 22), (1912, 3, 21), (1913, 3, 21), (1914, 3, 21),
        (1915, 3, 22), (1916, 3, 21), (1917, 3, 21), (1918, 3, 21),
        (1919, 3, 22), (1920, 3, 21), (1921, 3, 21), (1922, 3, 21),
        (1923, 3, 22), (1924, 3, 21), (1925, 3, 21), (1926, 3, 21),
        (1927, 3, 21), (1928, 3, 21), (1929, 3, 21), (1930, 3, 21),
        (1931, 3, 21), (1932, 3, 21), (1933, 3, 21), (1934, 3, 21),
        (1935, 3, 21), (1936, 3, 21), (1937, 3, 21), (1938, 3, 21),
        (1939, 3, 21), (1940, 3, 21), (1941, 3, 21), (1942, 3, 21),
        (1943, 3, 21, 18, 14), (1944, 3, 21), (1945, 3, 21), (1946, 3, 21),
        (1947, 3, 21), (1948, 3, 21), (1949, 3, 21), (1950, 3, 21),
        (1951, 3, 21), (1952, 3, 21), (1953, 3, 21), (1954, 3, 21),
        (1955, 3, 21), (1956, 3, 21), (1957, 3, 21), (1958, 3, 21),
        (1959, 3, 21), (1960, 3, 20), (1961, 3, 21), (1962, 3, 21),
        (1963, 3, 21), (1964, 3, 20), (1965, 3, 21), (1966, 3, 21),
        (1967, 3, 21), (1968, 3, 20), (1969, 3, 21), (1970, 3, 21),
        (1971, 3, 21), (1972, 3, 20), (1973, 3, 21), (1974, 3, 21),
        (1975, 3, 21), (1976, 3, 20), (1977, 3, 21), (1978, 3, 21),
        (1979, 3, 21), (1980, 3, 20), (1981, 3, 21), (1982, 3, 21),
        (1983, 3, 21), (1984, 3, 20), (1985, 3, 21), (1986, 3, 21),
        (1987, 3, 21), (1988, 3, 20), (1989, 3, 21), (1990, 3, 21),
        (1991, 3, 21), (1992, 3, 20), (1993, 3, 21), (1994, 3, 21),
        (1995, 3, 21), (1996, 3, 20), (1997, 3, 20), (1998, 3, 21),
        (1999, 3, 21), (2000, 3, 20), (2001, 3, 20), (2002, 3, 21),
        (2003, 3, 21), (2004, 3, 20), (2005, 3, 20), (2006, 3, 21),
        (2007, 3, 21), (2008, 3, 20), (2009, 3, 20), (2010, 3, 21),
        (2011, 3, 21), (2012, 3, 20), (2013, 3, 20), (2014, 3, 21),
        # First World Center date on 2015
        ## (2015, 3, 21), (2016, 3, 20), (2017, 3, 20), (2018, 3, 21),
        ## (2019, 3, 21), (2020, 3, 20), (2021, 3, 20), (2022, 3, 21),
        ## (2023, 3, 21), (2024, 3, 20), (2025, 3, 20), (2026, 3, 21),
        ## (2027, 3, 21), (2028, 3, 20), (2029, 3, 20), (2030, 3, 20),
        ## (2031, 3, 21), (2032, 3, 20), (2033, 3, 20), (2034, 3, 20),
        ## (2035, 3, 21), (2036, 3, 20), (2037, 3, 20), (2038, 3, 20),
        ## (2039, 3, 21), (2040, 3, 20), (2041, 3, 20), (2042, 3, 20),
        ## (2043, 3, 21), (2044, 3, 20), (2045, 3, 20), (2046, 3, 20),
        ## (2047, 3, 21), (2048, 3, 20), (2049, 3, 20), (2050, 3, 20),
        ## (2051, 3, 21), (2052, 3, 20), (2053, 3, 20), (2054, 3, 20),
        ## (2055, 3, 21), (2056, 3, 20), (2057, 3, 20), (2058, 3, 20),
        ## (2059, 3, 20), (2060, 3, 20), (2061, 3, 20), (2062, 3, 20),
        #              Last World Center date on 2064
        ## (2063, 3, 20), (2064, 3, 20), (2065, 3, 20), (2066, 3, 20),
        (2015, 3, 21, 18, 14), (2016, 3, 20, 18, 14), (2017, 3, 20, 18, 14),
        (2018, 3, 21, 18, 14), (2019, 3, 21, 18, 14), (2020, 3, 20, 18, 14),
        (2021, 3, 20, 18, 14), (2022, 3, 21, 18, 14), (2023, 3, 21, 18, 14),
        (2024, 3, 20, 18, 14), (2025, 3, 20, 18, 14), (2026, 3, 21, 18, 14),
        (2027, 3, 21, 18, 14), (2028, 3, 20, 18, 14), (2029, 3, 20, 18, 14),
        (2030, 3, 20, 18, 14), (2031, 3, 21, 18, 14), (2032, 3, 20, 18, 14),
        (2033, 3, 20, 18, 14), (2034, 3, 20, 18, 14), (2035, 3, 21, 18, 14),
        (2036, 3, 20, 18, 14), (2037, 3, 20, 18, 14), (2038, 3, 20, 18, 14),
        (2039, 3, 21, 18, 14), (2040, 3, 20, 18, 14), (2041, 3, 20, 18, 14),
        (2042, 3, 20, 18, 14), (2043, 3, 21, 18, 14), (2044, 3, 20, 18, 14),
        (2045, 3, 20, 18, 14), (2046, 3, 20, 18, 14), (2047, 3, 21, 18, 14),
        (2048, 3, 20, 18, 14), (2049, 3, 20, 18, 14), (2050, 3, 20, 18, 14),
        (2051, 3, 21, 18, 14), (2052, 3, 20, 18, 14), (2053, 3, 20, 18, 14),
        (2054, 3, 20, 18, 14), (2055, 3, 21, 18, 14), (2056, 3, 20, 18, 14),
        (2057, 3, 20, 18, 14), (2058, 3, 20, 18, 14), (2059, 3, 20, 18, 14),
        (2060, 3, 20, 18, 14), (2061, 3, 20, 18, 14), (2062, 3, 20, 18, 14),
        #                      Last World Center date on 2064
        (2063, 3, 20, 18, 14), (2064, 3, 20, 18, 14), (2065, 3, 20, 18, 14),
        (2066, 3, 20, 18, 14),
        (2067, 3, 20), (2068, 3, 20), (2069, 3, 20), (2070, 3, 20),
        (2071, 3, 20), (2072, 3, 20), (2073, 3, 20), (2074, 3, 20),
        (2075, 3, 20), (2076, 3, 20), (2077, 3, 20), (2078, 3, 20),
        (2079, 3, 20), (2080, 3, 20), (2081, 3, 20), (2082, 3, 20),
        (2083, 3, 20), (2084, 3, 20), (2085, 3, 20), (2086, 3, 20),
        (2087, 3, 20), (2088, 3, 20), (2089, 3, 20), (2090, 3, 20),
        (2091, 3, 20), (2092, 3, 20), (2093, 3, 20), (2094, 3, 20),
        (2095, 3, 20), (2096, 3, 19), (2097, 3, 20), (2098, 3, 20),
        (2099, 3, 20), (2100, 3, 20), (2101, 3, 21), (2102, 3, 21),
        (2103, 3, 21), (2104, 3, 20), (2105, 3, 21), (2106, 3, 21),
        (2107, 3, 21), (2108, 3, 20), (2109, 3, 21), (2110, 3, 21),
        (2111, 3, 21), (2112, 3, 20), (2113, 3, 21), (2114, 3, 21),
        (2115, 3, 21), (2116, 3, 20), (2117, 3, 21), (2118, 3, 21),
        (2119, 3, 21), (2120, 3, 20), (2121, 3, 21), (2122, 3, 21),
        (2123, 3, 21), (2124, 3, 20), (2125, 3, 21), (2126, 3, 21),
        (2127, 3, 21), (2128, 3, 20), (2129, 3, 20), (2130, 3, 21),
        (2131, 3, 21), (2132, 3, 20), (2133, 3, 20), (2134, 3, 21),
        (2135, 3, 21), (2136, 3, 20), (2137, 3, 20), (2138, 3, 21),
        (2139, 3, 21), (2140, 3, 20), (2141, 3, 20), (2142, 3, 21),
        (2143, 3, 21), (2144, 3, 20), (2145, 3, 20), (2146, 3, 21),
        (2147, 3, 21), (2148, 3, 20), (2149, 3, 20), (2150, 3, 21),
        (2151, 3, 21), (2152, 3, 20), (2153, 3, 20), (2154, 3, 21),
        (2155, 3, 21), (2156, 3, 20), (2157, 3, 20), (2158, 3, 21),
        (2159, 3, 21), (2160, 3, 20), (2161, 3, 20), (2162, 3, 20),
        (2163, 3, 21), (2164, 3, 20), (2165, 3, 20), (2166, 3, 20),
        (2167, 3, 21), (2168, 3, 20), (2169, 3, 20), (2170, 3, 20),
        (2171, 3, 21), (2172, 3, 20), (2173, 3, 20), (2174, 3, 20),
        (2175, 3, 21), (2176, 3, 20), (2177, 3, 20), (2178, 3, 20),
        (2179, 3, 21), (2180, 3, 20), (2181, 3, 20), (2182, 3, 20),
        (2183, 3, 21), (2184, 3, 20), (2185, 3, 20), (2186, 3, 20),
        (2187, 3, 21), (2188, 3, 20), (2189, 3, 20), (2190, 3, 20),
        (2191, 3, 21), (2192, 3, 20), (2193, 3, 20), (2194, 3, 20),
        (2195, 3, 20), (2196, 3, 20), (2197, 3, 20), (2198, 3, 20),
        (2199, 3, 20), (2200, 3, 21), (2201, 3, 21), (2202, 3, 21),
        (2203, 3, 21), (2204, 3, 21), (2205, 3, 21), (2206, 3, 21),
        (2207, 3, 21), (2208, 3, 21), (2209, 3, 21), (2210, 3, 21),
        (2211, 3, 21), (2212, 3, 21), (2213, 3, 21), (2214, 3, 21),
        (2215, 3, 21), (2216, 3, 21), (2217, 3, 21), (2218, 3, 21),
        (2219, 3, 21), (2220, 3, 21), (2221, 3, 21), (2222, 3, 21),
        (2223, 3, 21), (2224, 3, 21), (2225, 3, 21), (2226, 3, 21),
        (2227, 3, 21), (2228, 3, 20), (2229, 3, 21), (2230, 3, 21),
        (2231, 3, 21), (2232, 3, 20), (2233, 3, 21), (2234, 3, 21),
        (2235, 3, 21), (2236, 3, 20), (2237, 3, 21), (2238, 3, 21),
        (2239, 3, 21), (2240, 3, 20), (2241, 3, 21), (2242, 3, 21),
        (2243, 3, 21), (2244, 3, 20), (2245, 3, 21), (2246, 3, 21),
        (2247, 3, 21), (2248, 3, 20), (2249, 3, 21), (2250, 3, 21),
        (2251, 3, 21), (2252, 3, 20), (2253, 3, 21), (2254, 3, 21),
        (2255, 3, 21), (2256, 3, 20), (2257, 3, 21), (2258, 3, 21),
        (2259, 3, 21), (2260, 3, 20), (2261, 3, 20), (2262, 3, 21),
        (2263, 3, 21), (2264, 3, 20), (2265, 3, 20), (2266, 3, 21),
        (2267, 3, 21), (2268, 3, 20), (2269, 3, 20), (2270, 3, 21),
        (2271, 3, 21), (2272, 3, 20), (2273, 3, 20), (2274, 3, 21),
        (2275, 3, 21), (2276, 3, 20), (2277, 3, 20), (2278, 3, 21),
        (2279, 3, 21), (2280, 3, 20), (2281, 3, 20), (2282, 3, 21),
        (2283, 3, 21), (2284, 3, 20), (2285, 3, 20), (2286, 3, 21),
        (2287, 3, 21), (2288, 3, 20), (2289, 3, 20), (2290, 3, 21),
        (2291, 3, 21), (2292, 3, 20), (2293, 3, 20), (2294, 3, 20),
        (2295, 3, 21), (2296, 3, 20), (2297, 3, 20), (2298, 3, 20),
        (2299, 3, 21), (2300, 3, 21), (2301, 3, 21), (2302, 3, 21),
        (2303, 3, 22), (2304, 3, 21), (2305, 3, 21), (2306, 3, 21),
        (2307, 3, 22), (2308, 3, 21), (2309, 3, 21), (2310, 3, 21),
        (2311, 3, 22), (2312, 3, 21), (2313, 3, 21), (2314, 3, 21),
        (2315, 3, 22), (2316, 3, 21), (2317, 3, 21), (2318, 3, 21),
        (2319, 3, 22), (2320, 3, 21), (2321, 3, 21), (2322, 3, 21),
        (2323, 3, 22), (2324, 3, 21), (2325, 3, 21), (2326, 3, 21),
        (2327, 3, 21), (2328, 3, 21), (2329, 3, 21), (2330, 3, 21),
        (2331, 3, 21), (2332, 3, 21), (2333, 3, 21), (2334, 3, 21),
        (2335, 3, 21), (2336, 3, 21), (2337, 3, 21), (2338, 3, 21),
        (2339, 3, 21), (2340, 3, 21), (2341, 3, 21), (2342, 3, 21),
        (2343, 3, 21), (2344, 3, 21), (2345, 3, 21), (2346, 3, 21),
        (2347, 3, 21), (2348, 3, 21), (2349, 3, 21), (2350, 3, 21),
        (2351, 3, 21), (2352, 3, 21), (2353, 3, 21), (2354, 3, 21),
        (2355, 3, 21), (2356, 3, 21), (2357, 3, 21), (2358, 3, 21),
        (2359, 3, 21), (2360, 3, 21), (2361, 3, 21), (2362, 3, 21),
        (2363, 3, 21), (2364, 3, 20), (2365, 3, 21), (2366, 3, 21),
        (2367, 3, 21), (2368, 3, 20), (2369, 3, 21), (2370, 3, 21),
        (2371, 3, 21), (2372, 3, 20), (2373, 3, 21), (2374, 3, 21),
        (2375, 3, 21), (2376, 3, 20), (2377, 3, 21), (2378, 3, 21),
        (2379, 3, 21), (2380, 3, 20), (2381, 3, 21), (2382, 3, 21),
        (2383, 3, 21), (2384, 3, 20), (2385, 3, 21), (2386, 3, 21),
        (2387, 3, 21), (2388, 3, 20), (2389, 3, 21), (2390, 3, 21),
        (2391, 3, 21), (2392, 3, 20), (2393, 3, 21), (2394, 3, 21),
        (2395, 3, 21), (2396, 3, 20), (2397, 3, 20), (2398, 3, 21),
        (2399, 3, 21), (2400, 3, 20), (2401, 3, 20), (2402, 3, 21),
        (2403, 3, 21), (2404, 3, 20), (2405, 3, 20), (2406, 3, 21),
        (2407, 3, 21), (2408, 3, 20), (2409, 3, 20), (2410, 3, 21),
        (2411, 3, 21), (2412, 3, 20), (2413, 3, 20), (2414, 3, 21),
        (2415, 3, 21), (2416, 3, 20), (2417, 3, 20), (2418, 3, 21),
        (2419, 3, 21), (2420, 3, 20), (2421, 3, 20), (2422, 3, 21),
        (2423, 3, 21), (2424, 3, 20), (2425, 3, 20), (2426, 3, 21),
        (2427, 3, 21), (2428, 3, 20), (2429, 3, 20), (2430, 3, 20),
        (2431, 3, 21), (2432, 3, 20), (2433, 3, 20), (2434, 3, 20),
        (2435, 3, 21), (2436, 3, 20), (2437, 3, 20), (2438, 3, 20),
        (2439, 3, 21), (2440, 3, 20), (2441, 3, 20), (2442, 3, 20),
        (2443, 3, 21), (2444, 3, 20), (2445, 3, 20), (2446, 3, 20),
        (2447, 3, 21), (2448, 3, 20), (2449, 3, 20), (2450, 3, 20),
        (2451, 3, 21), (2452, 3, 20), (2453, 3, 20), (2454, 3, 20),
        (2455, 3, 21), (2456, 3, 20), (2457, 3, 20), (2458, 3, 20),
        (2459, 3, 20), (2460, 3, 20), (2461, 3, 20), (2462, 3, 20),
        (2463, 3, 20), (2464, 3, 20), (2465, 3, 20), (2466, 3, 20),
        (2467, 3, 20), (2468, 3, 20), (2469, 3, 20), (2470, 3, 20),
        (2471, 3, 20), (2472, 3, 20), (2473, 3, 20), (2474, 3, 20),
        (2475, 3, 20), (2476, 3, 20), (2477, 3, 20), (2478, 3, 20),
        (2479, 3, 20), (2480, 3, 20), (2481, 3, 20), (2482, 3, 20),
        (2483, 3, 20), (2484, 3, 20), (2485, 3, 20), (2486, 3, 20),
        (2487, 3, 20), (2488, 3, 20), (2489, 3, 20), (2490, 3, 20),
        (2491, 3, 20), (2492, 3, 20), (2493, 3, 20), (2494, 3, 20),
        (2495, 3, 20), (2496, 3, 19), (2497, 3, 20), (2498, 3, 20),
        (2499, 3, 20), (2500, 3, 20), (2501, 3, 21), (2502, 3, 21),
        (2503, 3, 21), (2504, 3, 20), (2505, 3, 21), (2506, 3, 21),
        (2507, 3, 21), (2508, 3, 20), (2509, 3, 21), (2510, 3, 21),
        (2511, 3, 21), (2512, 3, 20), (2513, 3, 21), (2514, 3, 21),
        (2515, 3, 21), (2516, 3, 20), (2517, 3, 21), (2518, 3, 21),
        (2519, 3, 21), (2520, 3, 20), (2521, 3, 21), (2522, 3, 21),
        (2523, 3, 21), (2524, 3, 20), (2525, 3, 21), (2526, 3, 21),
        (2527, 3, 21), (2528, 3, 20), (2529, 3, 20), (2530, 3, 21),
        (2531, 3, 21), (2532, 3, 20), (2533, 3, 20), (2534, 3, 21),
        (2535, 3, 21), (2536, 3, 20), (2537, 3, 20), (2538, 3, 21),
        (2539, 3, 21), (2540, 3, 20), (2541, 3, 20), (2542, 3, 21),
        (2543, 3, 21), (2544, 3, 20), (2545, 3, 20), (2546, 3, 21),
        (2547, 3, 21), (2548, 3, 20), (2549, 3, 20), (2550, 3, 21),
        (2551, 3, 21), (2552, 3, 20), (2553, 3, 20), (2554, 3, 21),
        (2555, 3, 21), (2556, 3, 20), (2557, 3, 20), (2558, 3, 21),
        (2559, 3, 21), (2560, 3, 20), (2561, 3, 20), (2562, 3, 20),
        (2563, 3, 21), (2564, 3, 20), (2565, 3, 20), (2566, 3, 20),
        (2567, 3, 21), (2568, 3, 20), (2569, 3, 20), (2570, 3, 20),
        (2571, 3, 21), (2572, 3, 20), (2573, 3, 20), (2574, 3, 20),
        (2575, 3, 21), (2576, 3, 20), (2577, 3, 20), (2578, 3, 20),
        (2579, 3, 21), (2580, 3, 20), (2581, 3, 20), (2582, 3, 20),
        (2583, 3, 21), (2584, 3, 20), (2585, 3, 20), (2586, 3, 20),
        (2587, 3, 21), (2588, 3, 20), (2589, 3, 20), (2590, 3, 20),
        (2591, 3, 21), (2592, 3, 20), (2593, 3, 20), (2594, 3, 20),
        (2595, 3, 20), (2596, 3, 20), (2597, 3, 20), (2598, 3, 20),
        (2599, 3, 20), (2600, 3, 21), (2601, 3, 21), (2602, 3, 21),
        (2603, 3, 21), (2604, 3, 21), (2605, 3, 21), (2606, 3, 21),
        (2607, 3, 21), (2608, 3, 21), (2609, 3, 21), (2610, 3, 21),
        (2611, 3, 21), (2612, 3, 21), (2613, 3, 21), (2614, 3, 21),
        (2615, 3, 21), (2616, 3, 21), (2617, 3, 21), (2618, 3, 21),
        (2619, 3, 21), (2620, 3, 21), (2621, 3, 21), (2622, 3, 21),
        (2623, 3, 21), (2624, 3, 21), (2625, 3, 21), (2626, 3, 21),
        (2627, 3, 21), (2628, 3, 20), (2629, 3, 21), (2630, 3, 21),
        (2631, 3, 21), (2632, 3, 20), (2633, 3, 21), (2634, 3, 21),
        (2635, 3, 21), (2636, 3, 20), (2637, 3, 21), (2638, 3, 21),
        (2639, 3, 21), (2640, 3, 20), (2641, 3, 21), (2642, 3, 21),
        (2643, 3, 21), (2644, 3, 20), (2645, 3, 21), (2646, 3, 21),
        (2647, 3, 21), (2648, 3, 20), (2649, 3, 21), (2650, 3, 21),
        (2651, 3, 21), (2652, 3, 20), (2653, 3, 21), (2654, 3, 21),
        (2655, 3, 21), (2656, 3, 20), (2657, 3, 21), (2658, 3, 21),
        (2659, 3, 21), (2660, 3, 20), (2661, 3, 20), (2662, 3, 21),
        (2663, 3, 21), (2664, 3, 20), (2665, 3, 20), (2666, 3, 21),
        (2667, 3, 21), (2668, 3, 20), (2669, 3, 20), (2670, 3, 21),
        (2671, 3, 21), (2672, 3, 20), (2673, 3, 20), (2674, 3, 21),
        (2675, 3, 21), (2676, 3, 20), (2677, 3, 20), (2678, 3, 21),
        (2679, 3, 21), (2680, 3, 20), (2681, 3, 20), (2682, 3, 21),
        (2683, 3, 21), (2684, 3, 20), (2685, 3, 20), (2686, 3, 21),
        (2687, 3, 21), (2688, 3, 20), (2689, 3, 20), (2690, 3, 21),
        (2691, 3, 21), (2692, 3, 20), (2693, 3, 20), (2694, 3, 20),
        (2695, 3, 21), (2696, 3, 20), (2697, 3, 20), (2698, 3, 20),
        (2699, 3, 21), (2700, 3, 21), (2701, 3, 21), (2702, 3, 21),
        (2703, 3, 22), (2704, 3, 21), (2705, 3, 21), (2706, 3, 21),
        (2707, 3, 22), (2708, 3, 21), (2709, 3, 21), (2710, 3, 21),
        (2711, 3, 22), (2712, 3, 21), (2713, 3, 21), (2714, 3, 21),
        (2715, 3, 22), (2716, 3, 21), (2717, 3, 21), (2718, 3, 21),
        (2719, 3, 22), (2720, 3, 21), (2721, 3, 21), (2722, 3, 21),
        (2723, 3, 22), (2724, 3, 21), (2725, 3, 21), (2726, 3, 21),
        (2727, 3, 21), (2728, 3, 21), (2729, 3, 21), (2730, 3, 21),
        (2731, 3, 21), (2732, 3, 21), (2733, 3, 21), (2734, 3, 21),
        (2735, 3, 21), (2736, 3, 21), (2737, 3, 21), (2738, 3, 21),
        (2739, 3, 21), (2740, 3, 21), (2741, 3, 21), (2742, 3, 21),
        (2743, 3, 21), (2744, 3, 21), (2745, 3, 21), (2746, 3, 21),
        (2747, 3, 21), (2748, 3, 21), (2749, 3, 21), (2750, 3, 21),
        (2751, 3, 21), (2752, 3, 21), (2753, 3, 21), (2754, 3, 21),
        (2755, 3, 21), (2756, 3, 21), (2757, 3, 21), (2758, 3, 21),
        (2759, 3, 21), (2760, 3, 20), (2761, 3, 21), (2762, 3, 21),
        (2763, 3, 21), (2764, 3, 20), (2765, 3, 21), (2766, 3, 21),
        (2767, 3, 21), (2768, 3, 20), (2769, 3, 21), (2770, 3, 21),
        (2771, 3, 21), (2772, 3, 20), (2773, 3, 21), (2774, 3, 21),
        (2775, 3, 21), (2776, 3, 20), (2777, 3, 21), (2778, 3, 21),
        (2779, 3, 21), (2780, 3, 20), (2781, 3, 21), (2782, 3, 21),
        (2783, 3, 21), (2784, 3, 20), (2785, 3, 21), (2786, 3, 21),
        (2787, 3, 21), (2788, 3, 20), (2789, 3, 21), (2790, 3, 21),
        (2791, 3, 21), (2792, 3, 20), (2793, 3, 20), (2794, 3, 21),
        (2795, 3, 21), (2796, 3, 20), (2797, 3, 20), (2798, 3, 21),
        (2799, 3, 21), (2800, 3, 20), (2801, 3, 20), (2802, 3, 21),
        (2803, 3, 21), (2804, 3, 20), (2805, 3, 20), (2806, 3, 21),
        (2807, 3, 21), (2808, 3, 20), (2809, 3, 20), (2810, 3, 21),
        (2811, 3, 21), (2812, 3, 20), (2813, 3, 20), (2814, 3, 21),
        (2815, 3, 21), (2816, 3, 20), (2817, 3, 20), (2818, 3, 21),
        (2819, 3, 21), (2820, 3, 20), (2821, 3, 20), (2822, 3, 21),
        (2823, 3, 21), (2824, 3, 20), (2825, 3, 20), (2826, 3, 20),
        (2827, 3, 21), (2828, 3, 20), (2829, 3, 20), (2830, 3, 20),
        (2831, 3, 21), (2832, 3, 20), (2833, 3, 20), (2834, 3, 20),
        (2835, 3, 21), (2836, 3, 20), (2837, 3, 20), (2838, 3, 20),
        (2839, 3, 21), (2840, 3, 20), (2841, 3, 20), (2842, 3, 20),
        (2843, 3, 21), (2844, 3, 20), (2845, 3, 20), (2846, 3, 20),
        (2847, 3, 21), (2848, 3, 20), (2849, 3, 20), (2850, 3, 20),
        (2851, 3, 21), (2852, 3, 20), (2853, 3, 20), (2854, 3, 20),
        (2855, 3, 21), (2856, 3, 20), (2857, 3, 20), (2858, 3, 20),
        (2859, 3, 20), (2860, 3, 20), (2861, 3, 20), (2862, 3, 20),
        (2863, 3, 20), (2864, 3, 20), (2865, 3, 20), (2866, 3, 20),
        (2867, 3, 20), (2868, 3, 20), (2869, 3, 20), (2870, 3, 20),
        (2871, 3, 20), (2872, 3, 20), (2873, 3, 20), (2874, 3, 20),
        (2875, 3, 20), (2876, 3, 20), (2877, 3, 20), (2878, 3, 20),
        (2879, 3, 20), (2880, 3, 20), (2881, 3, 20), (2882, 3, 20),
        (2883, 3, 20), (2884, 3, 20), (2885, 3, 20), (2886, 3, 20),
        (2887, 3, 20), (2888, 3, 20), (2889, 3, 20), (2890, 3, 20),
        (2891, 3, 20), (2892, 3, 19), (2893, 3, 20), (2894, 3, 20),
        (2895, 3, 20), (2896, 3, 19), (2897, 3, 20), (2898, 3, 20),
        (2899, 3, 20), (2900, 3, 20), (2901, 3, 21), (2902, 3, 21),
        (2903, 3, 21), (2904, 3, 20), (2905, 3, 21), (2906, 3, 21),
        (2907, 3, 21), (2908, 3, 20), (2909, 3, 21), (2910, 3, 21),
        (2911, 3, 21), (2912, 3, 20), (2913, 3, 21), (2914, 3, 21),
        (2915, 3, 21), (2916, 3, 20), (2917, 3, 21), (2918, 3, 21),
        (2919, 3, 21), (2920, 3, 20), (2921, 3, 21), (2922, 3, 21),
        (2923, 3, 21), (2924, 3, 20), (2925, 3, 20), (2926, 3, 21),
        (2927, 3, 21), (2928, 3, 20), (2929, 3, 20), (2930, 3, 21),
        (2931, 3, 21), (2932, 3, 20), (2933, 3, 20), (2934, 3, 21),
        (2935, 3, 21), (2936, 3, 20), (2937, 3, 20), (2938, 3, 21),
        (2939, 3, 21), (2940, 3, 20), (2941, 3, 20), (2942, 3, 21),
        (2943, 3, 21), (2944, 3, 20), (2945, 3, 20), (2946, 3, 21),
        (2947, 3, 21), (2948, 3, 20), (2949, 3, 20), (2950, 3, 21),
        (2951, 3, 21), (2952, 3, 20), (2953, 3, 20), (2954, 3, 21),
        (2955, 3, 21), (2956, 3, 20), (2957, 3, 20), (2958, 3, 20),
        (2959, 3, 21), (2960, 3, 20), (2961, 3, 20), (2962, 3, 20),
        (2963, 3, 21), (2964, 3, 20), (2965, 3, 20), (2966, 3, 20),
        (2967, 3, 21), (2968, 3, 20), (2969, 3, 20), (2970, 3, 20),
        (2971, 3, 21), (2972, 3, 20), (2973, 3, 20), (2974, 3, 20),
        (2975, 3, 21), (2976, 3, 20), (2977, 3, 20), (2978, 3, 20),
        (2979, 3, 21), (2980, 3, 20), (2981, 3, 20), (2982, 3, 20),
        (2983, 3, 21), (2984, 3, 20), (2985, 3, 20), (2986, 3, 20),
        (2987, 3, 21), (2988, 3, 20), (2989, 3, 20), (2990, 3, 20),
        (2991, 3, 20), (2992, 3, 20), (2993, 3, 20), (2994, 3, 20),
        (2995, 3, 20), (2996, 3, 20), (2997, 3, 20), (2998, 3, 20),
        (2999, 3, 20), (3000, 3, 21), (3001, 3, 21), (3002, 3, 21),
        (3003, 3, 21), (3004, 3, 21),
        )
    INJECT = (
        ((178, 0, 5), (2022, 3, 1, 17, 56)),
        ((178, 19, 1), (2022, 3, 2, 17, 57)),
        ((178, 19, 2), (2022, 3, 3, 17, 58)),
        ((181, 1, 2), (2024, 3, 21, 18, 14)),
        ((181, 1, 5), (2024, 3, 24, 19, 31)),
        ((181, 2, 13), (2024, 4, 20, 19, 54)),
        # Sunset Nur -> 15:49:14
        ((181, 3, 18, 20), (2024, 5, 15, 15, 2, 24.3744)),
        ((181, 3, 19, 20), (2024, 5, 16, 15, 3, 13.7088)),
        ((181, 4, 1, 17), (2024, 5, 17, 12, 4, 2.6112)),
        ((181, 4, 1, 20), (2024, 5, 17, 15, 4, 2.6112)),
        ((181, 18, 1), (2025, 2, 6, 17, 31, 3.7056)),
        ((181, 18, 19), (2025, 2, 24, 17, 49, 41.0304)),
        ((181, 0, 1), (2025, 2, 25, 17, 50, 40.3008)),
        ((181, 0, 4), (2025, 2, 28, 17, 53, 36.0384)),
        ((181, 19, 1), (2025, 3, 1, 17, 54, 33.9264)),
        ((181, 19, 19), (2025, 3, 19, 18, 11, 7.872)),
        ((182, 18, 19), (2026, 2, 24, 17, 49, 26.688)),
        ((182, 0, 1), (2026, 2, 25, 17, 50, 25.9584)),
        ((182, 0, 5), (2026, 3, 1, 17, 54, 20.016)),
        )

    def __init__(self):
        super().__init__()
        # https://qr.ae/psZONa
        # https://www.someweekendreading.blog/leap-year-revised/
        # 365 + 1/4 − 1/128 = 365.2421875 or 365 + 31/128
        # 365.2421897
        #self.MEAN_TROPICAL_YEAR = 365.2421897
        self.gc = GregorianCalendar()

    def check_long_date_from_short_date(self, data):
        """
        -c or --ck-dates
        """
        items = []

        for item in data:
            b_date, date = item
            bd = self.long_date_from_short_date(date)

        if bd != (b_date + (0, 0, 0)):
            items.append((item, bd))

        return items

    def create_date_lists(self, options):
        """
        -l or --list
        Also -S and -E must both used together.
        """
        data = []

        for k in reversed(range(options.start, options.end)):
            for v in reversed(range(1, 20)):
                for y in reversed(range(1, 20)):
                    for m in reversed(range(0, 20)):
                        if m == 0:
                            self._calc_kvymd(5, k, v, y, m, data)
                        else:
                            self._calc_kvymd(20, k, v, y, m, data)

        return data

    def analyze_date_error(self, options):
        """
        -a, optional -C, -G, and -X
        Also if -S and -E are used they must be used together.
        """
        return self._date_range(options)

    def consecutive_dates(self, options):
        """
        -k or --consecutive
        If -Y is used then consecutive years are checked from the defined
        TMP_ANS_DATES list.
        If -J test for consecutive Julian Period days between start and end
        Badi years.

        All days are checked based on -S and -E.

        If -X is used the more exact mode is used. This should be the
        normal usage.

        There should be no output so any output indicates inconsecutive years.
        """
        data = []
        months = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                  12, 13, 14, 15, 16, 17, 18, 0, 19)
        py = 0

        if options.year:
            for g_date in self.TMP_ANS_DATES:
                year = g_date[0]

                if py != 0 and py != year and year != (py + 1):
                    data.append(g_date)

            py = year
        elif options.jd:
            items = []
            last_jd = 0
            last_date = ()

            for year in range(options.start, options.end):
                for month in months:
                    if month == 0:
                        a = 5 if self._is_leap_year(year) else 4

                        for day in range(1, a + 1):
                            items.append((year, month, day))
                    else:
                        for day in range(1, 20):
                            items.append((year, month, day))

            for item in items:
                #jd = self.jd_from_badi_date(item)
                jd = self._jd_from_badi_date(item, options=options)
                jdf = math.floor(jd)

                if last_jd != 0 and jdf == last_jd:
                    last_leap = self._is_leap_year(last_date[0])
                    leap = self._is_leap_year(item[0])
                    data.append((last_date, last_jd, last_leap,
                                 item, jdf, leap, jdf-last_jd))

                last_jd = jdf
                last_date = item
        elif options.dates:
            last_jd = 0
            last_date = ()
            start = math.floor(self._jd_from_badi_date(
                (options.start, 1, 1), options=options))
            end = math.floor(self._jd_from_badi_date(
                (options.end, 1, 1), options=options))

            for jd in range(start, end):
                # This makes the Badi and Gregorian dates to always be
                # on the same day.
                jd_t = jd + 0.375 # About 9 pm UT.
                date = self._badi_date_from_jd_alt(jd_t)
                jd_f = self._jd_from_badi_date(date, options=options)

                if last_jd != 0 and (int(last_jd) == int(jd_f)
                                     and (int(jd_f) - int(last_jd) != 1)):
                    #last_leap = self._is_leap_year(last_date[0])
                    #leap = self._is_leap_year(date[0])
                    data.append((last_date, last_jd, jd_f, jd_t, date))

                last_jd = jd_f
                last_date = date
        elif options.hours: # Test for consecutive hours in a day.
            max_years = 1

            if (options.end - options.start) > max_years:
                print(f"Cannot test for more than {max_years} year at a time.",
                      file=sys.stderr)
            else:
                def twentyfour(year, month, day, hour):
                    if hour == 0:
                        date = (year, month, day)
                    else:
                        date = (year, month, day, hour)

                    return date

                for year in range(options.start, options.end):
                    for month in months:
                        if month == 0:
                            a = 5 if self._is_leap_year(year) else 4

                            for day in range(1, a + 1):
                                #sjd = self._jd_from_badi_date(
                                #    (year, month, day), options=options)
                                #sss = self._sun_setting(sjd)

                                for hour in range(24):
                                    date = twentyfour(year, month, day, hour)
                                    jd = self._jd_from_badi_date(
                                        date, options=options)
                                    b_date = self._badi_date_from_jd_alt(jd)
                                    data.append((date, jd, b_date))
                        else:
                            for day in range(1, 20):
                                #sjd = self._jd_from_badi_date(
                                #    (year, month, day), options=options)
                                #sss = self._sun_setting(sjd)

                                for hour in range(24):
                                    date = twentyfour(year, month, day, hour)
                                    jd = self._jd_from_badi_date(
                                        date, options=options)
                                    b_date = self._badi_date_from_jd_alt(jd)
                                    data.append((date, jd, b_date))

        return data

    def get_range(self, end):
        """
        -r or --range
        """
        seq = {-159: -259, -64: -159, 35: -64, 134: 35, 233: 134, 332: 233,
               386: 332, 617: 517, 716: 617, 815: 716, 914: 815, 1013: 914,
               1112: 1013, 1211: 1112}
        valid_dates = list(seq.keys())
        start = seq.get(end)
        assert start is not None, (f"You must use valid dates, found {end}, "
                                   f"Valid dates are {valid_dates}.")
        data = []

        for y in range(start, end):
            yj = end - y
            jump = yj if yj in (1, 34, 67, 100) else 0 # jump values
            data.append((y, (end - y) % 4, jump))      # mod 4 values

        return data

    def find_coefficents_precursor(self, options):
        """
        -p or --precursor

        This determines which coefficient group should be used for the
        years provided. The years provided are on the Badi Calendar - or +
        the epoch.

        Arguments to the process_segment() function.
        --------------------------------------------
        1. First run `badi_jd_tests.py -aGX > filename.txt`
           This file will be long so use `less filename.txt` to look at it.
           The last column will usually be -1.0, 0.0, or 1.0. The 0.0 values
           are already correct, the other two values means there is a
           difference in the between the Gregorian and Badi Julian Period
           days. These are the ones than need the coefficients which fixes them.
        2. The first argument is the current Badi year being processed
           subtracted from the end year argument.
        3. The second argument is the 1st coefficient corresponding to the
           (1, 34, 67, 100) numbers in the output from this method.
        4. The third argument is the 2nd coefficient which fixes the 1 values
           that were not included in the 1st coefficient and the 2 and 3 values.

        If an error JD falls on a 0 (zero) value then you need to change
        the start and end years so that no error JDs fall on a 0 value. The
        average number of years fixed in a group is 99, but this is not a
        hard and fast rule. Obvious break points are where a sequence
        changes. For example where there are two consecutive already good
        values where the values you need to fix had one.

        Note: Zero values never get processes.
        """
        data = []

        for y in range(options.start, options.end):
            year = options.end - y

            if year in (1, 34, 67, 100):
                a = year
            else:
                a = ''

            data.append((y + self.TRAN_COFF, y, year % 4, a))

        return data

    def find_coefficents(self, options):
        """
        -q or --coeff and -S and -E

        If -X is used the more exact mode is used. This should be the
        normal usage.
        """
        data = self._date_range(options)
        cp = {by: (n, a)
              for gy, by, n, a in self.find_coefficents_precursor(options)}
        items = []

        for item in data:
            b_year, month, day = item[0][:3]
            h, m, s = dt._get_hms(item[0], short=True)
            bjd = item[1]
            msg = (f"{b_year:> 5}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                   f"{s:<02} {bjd:<14} ")
            g_year, month, day = item[2][:3]
            h, m, s = dt._get_hms(item[2], short=True)
            gjd = item[3]
            msg += (f"{g_year:> 5}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                    f"{s:<02} {gjd:<9} ")
            diff = item[4]
            offby = item[5]
            msg += f"{diff:< 9} {offby:> 2} "
            j, k = cp.get(b_year)
            msg += f"{j} {k:<3}"
            items.append(msg)

        return items

    def find_gregorian_dates(self, options):
        """
        -g or --g-dates and -S and -E

        Converts Badi to Gregorian dates for the given range.
        """
        data = []

        for item in self._date_range(options):
            b_date, bjd, g_date, gjd, diff, offby = item
            g_date = self._gregorian_date_from_badi_date(
                b_date, options, *self.BAHAI_LOCATION[:3])
            gjd = self.gc.jd_from_gregorian_date(
                g_date, exact=options.exact, alt=options.alt_leap)
            diff = round(bjd - gjd, 6)
            offby = math.floor(bjd) - math.floor(gjd)
            data.append((b_date, bjd, g_date, gjd, diff, offby))

        return data

    def _jd_from_badi_date(self, b_date, lat=None, lon=None, zone=None, *,
                           options=None):
        year, month, day = self.date_from_kvymdhms(
            self.long_date_from_short_date(b_date), short=True)

        if month == 0: # Ayyam-i-Ha
            m = 18 * 19
        elif month < 19:
            m = (month - 1) * 19
        else: # month == 19:
            # _is_leap_year() calls `jd_from_badi_date` from BadiCalendar
            m = 18 * 19 + (5 if self._is_leap_year(year) else 4)

        td = self._days_in_years(year-1)
        jd = td + math.floor(self.BADI_EPOCH) + m + day

        if any([True if l is None else False for l in (lat, lon, zone)]):
            lat, lon, zone = self.BAHAI_LOCATION[:3]

        if (year, month, day) < (-261, 12, 2):
            diff = 0 # *** TODO *** Check this
        else:
            diff = 1

        ss_a = self._sun_setting(math.floor(jd + diff), lat, lon, zone) % 1
        #print(f"{str(b_date):<15} {day:<9} {jd:<14} {ss_a:<20}")

        if options:
            coff = 0 if options.coff else self._get_coff(year)
        else:
            coff = self._get_coff(year)

        return round(jd + ss_a + coff, 6)

    def _get_coff(self, year):
        def process_segment(y, coff1, coff2, onoff):
            func = lambda y: 1 < y < 100 and y % 4 in onoff
            coff = 0

            if coff1 and y in (1, 34, 67, 100):
                coff = coff1
            elif coff2 and func(y):
                coff = coff2

            return coff

        # General ranges are determined with:
        # ./contrib/misc/badi_jd_tests.py -p -S start_year -E end_year
        # Where -S is the 1st year and -E is the nth year + 1 that needs to
        # be process. Use the following command to test the results.
        # ./contrib/misc/badi_jd_tests.py -qX -S start_year -E end_year
        # The if or elif statments may not have the same ranges as are
        # passed into the process_segment method because we may need to skip
        # over already good results.
        if year < -1819: # -1842 to -1820 (range -S-1920 -E-1821)
            coff = process_segment(-1821 - year, -1, -1, (1, 2))
        elif year < -1796: # -1819 to -1797 (range -S-1819 -E-1800)
            coff = process_segment(-1800 - year, -1, -1, (1, 2, 3))
        elif year < -1747: # -1796 to -1748 (range -S-1792  -E-1782)
            coff = process_segment(-1782 - year, 0, 1, (2,))
        elif year < -1715: # -1747 to -1716 (range -S-1747 -E-1717)
            coff = process_segment(-1717 - year, 0, -1, (2,))
        elif year < -1697: # -1715 to -1698 (range -S-1715 -E-1701)
            coff = process_segment(-1701 - year, -1, -1, (1, 2))
        elif year < -1684: # -1697 to -1685 (range -S-1697 -E-1687)
            coff = process_segment(-1687 - year, 1, 1, (1, 2))
        elif year < -1615: # -1684 to -1616 (range -S-1684 -E-1655)
            coff = process_segment(-1655 - year, 1, 1, (1,))
        elif year < -1583: # -1615 to -1584 (range -S-1615 -E-1586)
            coff = process_segment(-1586 - year, -1, -1, (1,))
        elif year < -1551: # -1583 to -1552 (range -S-1585 -E-1553)
            coff = process_segment(-1553 - year, -1, -1, (1, 2))
        elif year < -1519: # -1551 to -1520 (range -S-1551 -E-1520)
            coff = process_segment(-1520 - year, -1, -1, (1, 2, 3))
        elif year < -1479: # -1519 to -1480 (range -S-1519 -E-1499)
            coff = process_segment(-1499 - year, -1, -1, (0, 1, 2, 3))
        elif year < -1447: # -1779 to -1448 (range -S-1479 -E-1450)
            coff = process_segment(-1450 - year, -1, -1, (1,))
        elif year < -1415: # -1447 to -1416 (range -S-1447 -E-1417)
            coff = process_segment(-1417 - year, -1, -1, (1, 2))
        elif year < -1396: # -1415 to -1397 (range -S-1415 -E-1400)
            coff = process_segment(-1400 - year, -1, -1, (1, 2, 3))
        elif year < -1347: # -1396 to -1348 (range -S-1396 -E-1387)
            coff = process_segment(-1387 - year, 1, 1, (1,))
        elif year < -1315: # -1347 to -1316 (range -S-1347 -E-1318)
            coff = process_segment(-1318 - year, -1, -1, (1,))
        elif year < -1297: # -1315 to -1298 (range -S-1315 -E-1301)
            coff = process_segment(-1301 - year, -1, -1, (1, 2,))
        elif year < -1280: # -1296 to -1281 (range -S-1297 -E-1283)
            coff = process_segment(-1283 - year, 1, 1, (1, 2))
        elif year < -1215: # -1280 to -1216 (range -S-1280 -E-1251)
            coff = process_segment(-1251 - year, 1, 1, (1,))
        elif year < -1183: # -1215 to -1184 (range -S-1215 -E-1186)
            coff = process_segment(-1186 - year, -1, -1, (1,))
        elif year < -1151: # -1183 to -1152 (range -S-1183 -E-1153)
            coff = process_segment(-1153 - year, -1, -1, (1, 2))
        elif year < -1119: # -1151 to -1120 (range -S-1151 -E-1120)
            coff = process_segment(-1120 - year, -1, -1, (1, 2, 3,))
        elif year < -1079: # -1119 to -1080 (range -S-1119 -E-1099)
            coff = process_segment(-1099 - year, -1, -1, (0, 1, 2, 3))
        elif year < -1051: # -1079 to -1052 (range -S-1079 -E-1054)
            coff = process_segment(-1054 - year, -1, -1, (1,))
        elif year < -1019: # -1051 to -1020 (range -S-1051 -E-1021)
            coff = process_segment(-1021 - year, -1, -1, (1, 2))
        elif year < -996: # -1019 to -997 (range -S-1019 -E-1000)
            coff = process_segment(-1000 - year, -1, -1, (1, 2, 3))
        elif year < -947: # -996 to -948 (range -S-996 -E-987)
            coff = process_segment(-987 - year, 1, 1, (1,))
        elif year < -915: # -947 to -916 (range -S-947 -E-918)
            coff = process_segment(-918 - year, -1, -1, (1,))
        elif year < -897: # -915 to -898 (range -S-915 -E-901
            coff = process_segment(-901 - year, -1, -1, (1, 2))
        elif year < -880: # -897 to -881 (range -S-897 -E-883)
            coff = process_segment(-883 - year, 1, 1, (1, 2))
        elif year < -815: # -880 to -816 (range -S-880 -E-851)
            coff = process_segment(-851 - year, 1, 1, (1,))
        elif year < -783: # -815 to -784 (range -S-815 -E-786)
            coff = process_segment(-786 - year, -1, -1, (1,))
        elif year < -751: # -783 to -752 (range -S-783 -E-753
            coff = process_segment(-753 - year, -1, -1, (1, 2,))
        elif year < -719: # -751 to -720 (range -S-751 -E-720)
            coff = process_segment(-720 - year, -1, -1, (1, 2, 3))
        elif year < -683: # -719 to -684 (range -S-719 -E-699)
            coff = process_segment(-699 - year, -1, -1, (0, 1, 2, 3))
        elif year < -651: # -683 to -652 (range -S-683 -E-654)
            coff = process_segment(-654 - year, -1, -1, (1,))
        elif year < -619: # -651 to -620 (range -S-651 -E-621)
            coff = process_segment(-621 - year, -1, -1, (1, 2,))
        elif year < -596: # -619 to -597 (range -S-619 -E-600)
            coff = process_segment(-600 - year, -1, -1, (1, 2, 3))
        elif year < -547: # -596 to -548 (range -S-596 -E-587)
            coff = process_segment(-587 - year, 1, 1, (1,))
        elif year < -515: # -547 to -516 (range -S-547 -E-518)
            coff = process_segment(-518 - year, -1, -1, (1,))
        elif year < -497: # -515 to -498 (range -S-515 -E-501)
            coff = process_segment(-501 - year, -1, -1, (1, 2,))
        elif year < -480: # -497 to -481 (range -S-497 -E-483)
            coff = process_segment(-483 - year, 1, 1, (1, 2))
        elif year < -415: # -480 to -416 (range -S-480 -E-451)
            coff = process_segment(-451 - year, 1, 1, (1,))
        elif year < -383: # -415 to -384 (range -S-415 -E-386)
            coff = process_segment(-386 - year, -1, -1, (1,))
        elif year < -351: # -383 to -352 (range -S-383 -E-353)
            coff = process_segment(-353 - year, -1, -1, (1, 2))
        elif year < -319: # -351 to -320 (range -S-351 -E-320)
            coff = process_segment(-320 - year, -1, -1, (1, 2, 3,))
        elif year < -279: # -319 to -280 (range -S-319 -E-299)
            coff = process_segment(-299 - year, -1, -1, (0, 1, 2, 3))
        elif year < -247: # -279 to -248 (range -S-279 -E-250)
            coff = process_segment(-250 - year, -1, -1, (1,))
        elif year < -215: # -247 to -216 (range -S-247 -E-217)
            coff = process_segment(-217 - year, -1, -1, (1, 2))
        elif year < -196: # -215 to -197 (range -S-215 -E-200)
            coff = process_segment(-200 - year, -1, -1, (1, 2, 3))
        elif year < -147: # -196 to -148 (range -S-196 -E-183)
            coff = process_segment(-183 - year, 1, 1, (1,))
        elif year < -115: # -147 to -116 (range -S-147 -E-118)
            coff = process_segment(-118 - year, -1, -1, (1,))
        elif year < -99: # -115 to -100 (range -S-115 -E-101)
            coff = process_segment(-101 - year, -1, -1, (1, 2,))
        elif year < -80: # -99 to -81 (range -S-97 -E-83)
            coff = process_segment(-83 - year, 1, 1, (1, 2))
        elif year < -15: # -80 to -16 (range -S-80 -E-51)
            coff = process_segment(-51 - year, 1, 1, (1,))
        elif year < 17: # -15 to 16 (range -S-15 -E14)
            coff = process_segment(14 - year, -1, -1, (1,))
        elif year < 49: # 17 to 48 (range -S17 -E47)
            coff = process_segment(47 - year, -1, -1, (1, 2))
        elif year < 81: # 49 to 80 (range -S49 -E80)
            coff = process_segment(80 - year, -1, -1, (1, 2, 3))
        elif year < 117: # 81 to 116 (range -S81 -E101)
            coff = process_segment(101 - year, -1, -1, (0, 1, 2 , 3))
        elif year < 153: # 117 to 129 (range -S117 -E150)
            coff = process_segment(150 - year, -1, -1, (1,))
        elif year < 185: # 153 to 184 (range -S153 -E183)
            coff = process_segment(183 - year, -1, -1, (1, 2))
        elif year < 204: # 185 to 203 (range -S185 -E200)
            coff = process_segment(200 - year, -1, -1, (1, 2, 3))
        elif year < 253: # 204 to 252 (range -S204 -E213)
            coff = process_segment(213 - year, 1, 1, (1,))
        elif year < 285: # 253 to 284 (range -S253 -E282)
            coff = process_segment(282 - year, -1, -1, (1,))
        elif year < 303: # 285 to 302 (range -S285 -E299)
            coff = process_segment(299 - year, -1, -1, (1, 2))
        elif year < 320: # 303 to 319 (range -S303 -E317)
            coff = process_segment(317 - year, 1, 1, (1, 2))
        elif year < 385: # 320 to 384 (range -S320 -E349)
            coff = process_segment(349 - year, 1, 1, (1,))
        elif year < 417: # 385 to 416 (range -S385 -E414)
            coff = process_segment(414 - year, -1, -1, (1,))
        elif year < 449: # 417 to 448 (range -S417 -E447)
            coff = process_segment(447 - year, -1, -1, (1, 2))
        elif year < 481: # 449 to 480 (range -S449 -E480)
            coff = process_segment(480 - year, -1, -1, (1, 2, 3))
        elif year < 521: # 481 to 520 (range -S481 -E501)
            coff = process_segment(501 - year, -1, -1, (0, 1, 2, 3))
        elif year < 553: # 521 to 552 (range -S521 -E550)
            coff = process_segment(550 - year, -1, -1, (1,))
        elif year < 585: # 553 to 584 (range -S553 -E583)
            coff = process_segment(583 - year, -1, -1, (1, 2))
        elif year < 604: # 585 to 603 (range -S585 -E600)
            coff = process_segment(600 - year, -1, -1, (1, 2 ,3))
        elif year < 653: # 604 to 652 (range -S604 -E613)
            coff = process_segment(613 - year, 1, 1, (1,))
        elif year < 685: # 653 to 684 (range -S653 -E682)
            coff = process_segment(682 - year, -1, -1, (1,))
        elif year < 703: # 685 to 702 (range -S685 -E699)
            coff = process_segment(699 - year, -1, -1, (1, 2))
        elif year < 720: # 703 to 719 (range -S703 -E717)
            coff = process_segment(717 - year, 1, 1, (1, 2))
        elif year < 785: # 720 to 784 (range -S720 -E749)
            coff = process_segment(749 - year, 1, 1, (1,))
        elif year < 817: # 785 to 816 (range -S785 -E814)
            coff = process_segment(814 - year, -1, -1, (1,))
        elif year < 849: # 817 to 848 (range -S817 -E847)
            coff = process_segment(847 - year, -1, -1, (1, 2))
        elif year < 881: # 849 to 880 (range -S849 -E880)
            coff = process_segment(880 - year, -1, -1, (1, 2, 3))
        elif year < 917: # 881 to 916 (range -S881 -E901)
            coff = process_segment(901 - year, -1, -1, (0, 1, 2, 3))
        elif year < 949: # 917 to 948 (range -S917 -E946)
            coff = process_segment(946 - year, -1, -1, (1,))
        elif year < 981: # 849 to 980 (range -S949 -E979)
            coff = process_segment(979 - year, -1, -1, (1, 2))
        elif year < 1004: # 981 to 1003 (range -S981 -E1000)
            coff = process_segment(1000 - year, -1, -1, (1, 2, 3))
        elif year < 1049: # 1004 to 1048 (range -S1004 -E1013)
            coff = process_segment(1013 - year, 1, 1, (1,))
        elif year < 1081: # 1049 to 1080 (range -S1049 -E1078)
            coff = process_segment(1078 - year, -1, -1, (1,))
        elif year < 1103: # 1081 to 1102 (range -S1081 -E1099)
            coff = process_segment(1099 - year, -1, -1, (1, 2))
        elif year < 1116: # 1103 to 1115 (range -S1103 -E1113)
            coff = process_segment(1113 - year, 1, 1, (1, 2))
        elif year < 1162: # 1116 to 1161 (range -S1116 -E1145)
            coff = process_segment(1145 - year, 1, 1, (1,))
        else:
            coff = 0

        return coff

    def _badi_date_from_jd_alt(self, jd:float, lat:float=None, lon:float=None,
                               zone:float=None) -> tuple:
        """
        Convert a Julian period day to a Badi date.
        """
        def get_leap_year_info(y):
            leap = self._is_leap_year(year)
            yds = 366 if leap else 365
            ld = 5 if leap else 4
            return leap, yds, ld

        def check_and_fix_day(cjd, y, lat=None, lon=None, zone=None):
            fjdy = self.jd_from_badi_date((y, 1, 1), lat, lon, zone)
            return y-1 if (fjdy - cjd) > 0 else y

        md = jd - (self.BADI_EPOCH - 1)
        year = math.floor(md / self.MEAN_TROPICAL_YEAR) + 1
        #year = math.floor(abs(md / self.MEAN_TROPICAL_YEAR))
        #year *= -1 if md < (self.BADI_EPOCH - 1) else 1

        leap, yds, ld = get_leap_year_info(year)

        if (y := check_and_fix_day(jd, year, lat, lon, zone)):
            year = y
            leap, yds, ld = get_leap_year_info(year)

        fjdy = self.jd_from_badi_date((year, 1, 1), lat, lon, zone)
        days = math.floor(jd) - math.floor(fjdy) + 1

        if days <= 342: # Month 1 - 18
            m_days = days % 19
            day = 19 if m_days == 0 else m_days
        elif (342 + ld) < days <= yds: # Month 19
            day = days - (342 + ld)
        else: # Ayyam-i-Ha
            day = days % 342

        month_days = [(n, 19) for n, v in self.BADI_MONTH_NAMES]
        month_days[18] = (0, ld)

        for month, ds in month_days:
            if days > ds:
                days -= ds
            else:
                break

        if any([True if l is None else False for l in (lat, lon, zone)]):
            lat, lon, zone = self.BAHAI_LOCATION[:3]

        #diff = jd % 1 - self._sun_setting(jd, lat, lon, zone) % 1
        #day += jd % 1 + 0.5

        ## print('jd:', jd, 'md:', md, #'td', td,
        ##       'days:', days,
        ##       'fjdy', fjdy,
        ##       #'d', d,
        ##       #'diff', diff,
        ##       'ld', ld, 'date:', (year, month, day),
        ##       file=sys.stderr)

        return year, month, day

    def _date_range(self, options):
        data = []
        last_year = 0
        inject = [(b_date[0], (b_date, g_date))
                  for b_date, g_date in self.INJECT]

        for g_date in self.TMP_ANS_DATES:
            b_date = (g_date[0] - self.TRAN_COFF, 1, 1)
            #b_date += self._trim_hms(self._get_hms(g_date, True))

            if options.start <= b_date[0]:
                assert last_year == 0 or g_date[0] == (last_year + 1), (
                    f"Found an out of sequence Gregorian year: current "
                    f"{g_date[0]}, last year {last_year}")
                if options.end <= b_date[0]: break
                self._calculate_b_date(b_date, g_date, data, options)

                for dates in self._find_dates(b_date[0], inject):
                    self._calculate_b_date(*dates, data, options)

                last_year = g_date[0]

        return data

    def _calculate_b_date(self, b_date, g_date, data, options):
        gjd = self.gc.jd_from_gregorian_date(
            g_date, exact=options.exact, alt=options.alt_leap)
        bjd = self._jd_from_badi_date(b_date, options=options)
        #bjd = self.jd_from_badi_date(b_date)
        diff = round(bjd - gjd, 6)
        offby = math.floor(bjd) - math.floor(gjd)
        data.append((b_date, bjd, g_date, gjd, diff, offby))

    def _find_dates(self, year, inject):
        items = []

        for y, item in inject:
            if y == year:
                items.append(item)

        return items

    def _gregorian_date_from_badi_date(self, b_date:tuple, options, lat=0,
                                       lon=0, zone=0) -> tuple:
        """
        Get the Gregorian date from the Badi date.
        """
        jd = self._jd_from_badi_date(b_date, lat=lat, lon=lon, zone=zone,
                                     options=options)
        gd = self.gc.gregorian_date_from_jd(jd, exact=options.exact)
        g_date = self.gc.ymdhms_from_date(gd)
        return g_date

    def _calc_kvymd(self, days, k, v, y, m, data):
        year = (k - 1) * 361 + (v - 1) * 19 + y

        for d in reversed(range(1, days)):
            data.append(((k, v, y, m, d), (year, m, d)))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description=("Test Badi date ranges."))
    parser.add_argument(
        '-c', '--ck-dates', action='store_true', default=False, dest='ck_dates',
        help="Check that long_date_from_short_date() works correctly.")
    parser.add_argument(
        '-l', '--list', action='store_true', default=False, dest='list',
        help="Generate a list of Badi dates both long and short versions.")
    parser.add_argument(
        '-a', '--analyze', action='store_true', default=False, dest='analyze',
        help="Analyze Badi date errors when converting to jd.")
    parser.add_argument(
        '-k', '--consecutive', action='store_true', default=False,
        dest='consecutive',
        help="Check that all dates are consecutive with no holes.")
    parser.add_argument(
        '-r', '--range', type=int, default=0, dest='range',
        help="Dump an analysis of date ranges. Takes an integer value.")
    parser.add_argument(
        '-p', '--precursor', action='store_true', default=False,
        dest='precursor',
        help="Dump data for determining the precursors to the coefficients.")
    parser.add_argument(
        '-q', '--coeff', action='store_true', default=False, dest='coeff',
        help="Dump data for determining coefficients.")
    parser.add_argument(
        '-g', '--g-dates', action='store_true', default=False, dest='g_dates',
        help="Convert Badi to Gregorian dates.")
    parser.add_argument(
        '-A', '--alt-leap', action='store_true', default=False,
        dest='alt_leap', help="Use alternative leap year method.")
    parser.add_argument(
        '-C', '--coff', action='store_true', default=False, dest='coff',
        help="Turn off all coefficients during an analysis.")
    parser.add_argument(
        '-X', '--exact', action='store_true', default=False, dest='exact',
        help=("Use the 4|100|400 or the 4|128 rules from Julian Calendar "
              "day one."))
    parser.add_argument(
        '-G', '--graph', action='store_true', default=False, dest='graph',
        help=("Turn off all coefficients and dump output appropriate for "
              "graphing."))
    parser.add_argument(
        '-S', '--start', type=int, default=None, dest='start',
        help="Start Badi year of sequence.")
    parser.add_argument(
        '-E', '--end', type=int, default=None, dest='end',
        help="End Badi year of sequence.")
    parser.add_argument(
        '-J', '--jd', action='store_true', default=False, dest='jd',
        help=("Test for consecutive Julian Period days between start and "
              "end Badi years."))
    parser.add_argument(
        '-Y', '--year', action='store_true', default=False, dest='year',
        help="Test for the consecutive defined years 1 - 3004.")
    parser.add_argument(
        '-D', '--dates', action='store_true', default=False, dest='dates',
        help="Test for the consecutive dates from JDs.")
    parser.add_argument(
        '-H', '--hours', action='store_true', default=False, dest='hours',
        help="Test for the consecutive hours.")
    options = parser.parse_args()
    exclusive_error = (options.list, options.ck_dates, options.analyze,
                       options.consecutive, options.range != 0)
    assert exclusive_error.count(True) <= 1, (
        "Options -l, -c, -a, -k, and -r are exclusive.")
    dt = DateTests()
    ret = 0

    if options.ck_dates:
        if options.start is None or options.end is None:
            print("If option -c is used, -S and -E must also be used.",
                  file=sys.stderr)
            ret = 1
        else:
            data = dt.create_date_lists(options)
            bad_items = dt.check_long_date_from_short_date(data)
            bad_items = bad_items if bad_items else "All dates match."
            pprint.pprint(bad_items)
    elif options.list:
        if options.start is None or options.end is None:
            print("If option -l is used, -S and -E must also be used.",
                  file=sys.stderr)
            ret = 1
        else:
            data = dt.create_date_lists(options)
            pprint.pprint(data)
    elif options.analyze:
        if options.start is None or options.end is None:
            # Set default Badi years.
            options.start = -1842 # Julian year 1
            options.end = 1162    # Gregorian year 3004

        if options.graph:
            options.coff = True
            data = dt.analyze_date_error(options)
            items = []

            for item in data:
                year, month, day = item[0][:3]
                h, m, s = dt._get_hms(item[0], short=True)
                bjd = item[1]
                msg = (f"{year}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                       f"{s:>02} {bjd} ")
                year, month, day = item[2][:3]
                h, m, s = dt._get_hms(item[2], short=True)
                gjd = item[3]
                msg += (f"{year}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                        f"{s:>02} {gjd} ")
                diff = item[4]
                offby = item[5]
                msg += f"{diff} {offby}"
                items.append(msg)

            [print(item) for item in items]
        else:
            data = dt.analyze_date_error(options)
            [print(item) for item in data]
            diffs = []
            p = 0
            n = 0

            for item in data:
                if item[-1] != 0:
                    diffs.append(item[-1])

                if item[-1] > 0:
                    p += 1
                elif item[-1] < 0:
                    n += 1

            print(f"Total: {len(data)}\nPositive Errors: {p}\n"
                  f"Negative Errors: {n}\nTotal errors: {len(diffs)}")

            if options.coff:
                coff = sum(diffs) / len(diffs)
                print(coff)
    elif options.consecutive:
        if (options.year is False and
            (options.start is None or options.end is None)):
            # Set default Badi years.
            options.start = -1842 # Gregorian year 1
            options.end = 1162    # Gregorian year 3004

        if options.year:
            [print(item) for item in dt.consecutive_dates(options)]
        elif options.jd:
            data = dt.consecutive_dates(options)
            [print(
                f"{str(l_date):<15} {l_jd:<7} {str(ll):<5} "
                f"{str(item):<15} {jdf:<7} {str(l):<5} "
                f"{diff:<2}"
                ) for l_date, l_jd, ll, item, jdf, l, diff in data]
            years = options.end-options.start
            print(f"Start year: {options.start}\n"
                  f"End year: {options.end}\n"
                  f"Years analyzed: {years}\n"
                  f"Approximate days analyzed: {years*dt.JULIAN_YEAR}\n"
                  f"Total error days: {len(data)}")
        elif options.dates: # Consecutive Badi dates
            data = dt.consecutive_dates(options)
            print("last_date       "
                  "last_jd   !=   "
                  "jd_f           "
                  "jd_t           "
                  "date            "
                  "diff")
            [print(f"{str(l_d):<15} "
                   f"{l_jd:<14} "
                   f"{jd_f:<14} "
                   f"{jd_t:<14} "
                   f"{str(date):<15} "
                   f"{(jd_f-last_jd) == 1}"
                   ) for l_d, l_jd, jd_f, jd_t, date in data]
        elif options.hours:
            data = dt.consecutive_dates(options)
            [print(item) for item in data]
        else:
            print("Please choose one of options -[YJDH] with -k.",
                  file=sys.stderr)
            ret = 1
    elif options.range != 0:
        data = dt.get_range(options.range)
        [print(item) for item in data]
        print(f"Total years: {len(data)}")
    elif options.precursor:
        if options.start is None or options.end is None:
            print("If option -p is used, -S and -E must also be used.",
                  file=sys.stderr)
            ret = 1
        else:
            data = dt.find_coefficents_precursor(options)
            [print(f"{gy:> 5} {by:> 5}, {n:<1} {a:>2}")
             for gy, by, n, a in data]
            print(f"Total years: {len(data)}")
    elif options.coeff:
        if options.start is None or options.end is None:
            print("If option -q is used, -S and -E must also be used.",
                  file=sys.stderr)
            ret = 1
        else:
            [print(item) for item in dt.find_coefficents(options)]
    elif options.g_dates:
        if options.start is None or options.end is None:
            print("If option -g is used, -S and -E must also be used.",
                  file=sys.stderr)
            ret = 1
        else:
            print("b_date           "
                  "bjd            "
                  "g_date                         "
                  "gjd            "
                  "diff "
                  "offby")
            [print(f"{str(b_date):<16} "
                   f"{bjd:<14} "
                   f"{str(g_date):<30} "
                   f"{gjd:<14} "
                   f"{diff:<4} "
                   f"{offby}"
                   )
             for (b_date, bjd, g_date,
                  gjd, diff, offby) in dt.find_gregorian_dates(options)]
    else:
        parser.print_help()

    sys.exit(ret)
