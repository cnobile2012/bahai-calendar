#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import os
import sys
import math
import pprint

PWD = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(os.path.dirname(PWD))
sys.path.append(BASE_DIR)

from bahai_calendar import BahaiCalendar, GregorianCalendar


class DateTests(BahaiCalendar):
    START_K = -5
    END_K = 5

    # The following three must be updated in unison.
    # This must be the first Gregorian date in TMP_ANS_DATES below.
    START_G = 1494
    END_G = 3004
    TRAN_COFF = 1843

    TMP_ANS_DATES = (
        (   1, 3, 23), (   2, 3, 23), (   3, 3, 23), (   4, 3, 23),
        (   5, 3, 23), (   6, 3, 23), (   7, 3, 23), (   8, 3, 23),
        (   9, 3, 23), (  10, 3, 23), (  11, 3, 23), (  12, 3, 23),
        (  13, 3, 23), (  14, 3, 23), (  15, 3, 23), (  16, 3, 23),
        (  17, 3, 23), (  18, 3, 23), (  19, 3, 23), (  20, 3, 23), # ?
        (  21, 3, 23), (  22, 3, 23), (  23, 3, 23), (  24, 3, 22),
        (  25, 3, 23), (  26, 3, 23), (  27, 3, 23), (  28, 3, 22),
        (  29, 3, 23), (  30, 3, 23), (  31, 3, 23), (  32, 3, 22),
        (  33, 3, 23), (  34, 3, 23), (  35, 3, 23), (  36, 3, 22),
        (  37, 3, 23), (  38, 3, 23), (  39, 3, 23), (  40, 3, 22),

        (1494, 3, 12),
        (1504, 3, 11),
        (1514, 3, 11),
        (1524, 3, 11),
        (1534, 3, 11),
        (1544, 3, 11),
        (1554, 3, 11),
        (1564, 3, 10), # +1 2292378.0
        (1574, 3, 11),
        (1575, 3, 11),
        (1576, 3, 10), # +1 2296761.0
        (1577, 3, 11),
        (1578, 3, 11),
        (1579, 3, 11),
        (1580, 3, 10), # +1 2298222.0
        (1581, 3, 11),
        (1582, 3, 11),
        (1583, 3, 22),
        (1584, 3, 20), # +1 2299683.0

        (1594, 3, 21),
        (1604, 3, 20),
        (1614, 3, 21),
        (1624, 3, 20),
        (1634, 3, 20), # +1 2317945.0
        (1644, 3, 20),
        (1654, 3, 20),
        (1664, 3, 20),
        (1674, 3, 20),
        (1684, 3, 19),

        (1694, 3, 20), # +1 2339860.0
        (1695, 3, 20),
        (1696, 3, 19), # +1 2340590.0
        (1697, 3, 20),
        (1698, 3, 20),
        (1699, 3, 20),
        (1700, 3, 20), # +1 2342051.0
        (1701, 3, 21),
        (1702, 3, 21),
        (1703, 3, 21),
        (1704, 3, 20), # +1 2343512.0

        (1714, 3, 21),
        (1724, 3, 20),
        (1734, 3, 21),
        (1744, 3, 20),
        (1754, 3, 20), # +1 2361774.0
        (1764, 3, 20),
        (1774, 3, 20),
        (1784, 3, 20),

        (1794, 3, 20),
        (1795, 3, 20), # +1 2376749.0
        (1796, 3, 20),
        (1797, 3, 20),
        (1798, 3, 20),
        (1799, 3, 20), # +1 2378210.0
        (1800, 3, 21),
        (1801, 3, 21),
        (1802, 3, 21),
        (1803, 3, 21), # +1 2379671.0
        (1804, 3, 21),

        (1814, 3, 21),
        (1824, 3, 20), # +1 2387341.0
        (1834, 3, 21),
        (1835, 3, 21),
        (1836, 3, 20),
        (1837, 3, 21),
        (1838, 3, 21),
        (1839, 3, 21),
        (1840, 3, 20),
        (1841, 3, 21),
        (1842, 3, 21),
        (1843, 3, 21),
        # +1 2394646.257639
        (1844, 3, 20, 18, 11), (1845, 3, 20), (1846, 3, 21), (1847, 3, 21),
        (1848, 3, 20), (1849, 3, 20), (1850, 3, 21), (1851, 3, 21),
        (1852, 3, 20), (1853, 3, 20), (1854, 3, 21), (1855, 3, 21),
        (1856, 3, 20), (1857, 3, 20), (1858, 3, 21), (1859, 3, 21),
        (1860, 3, 20), (1861, 3, 20), (1862, 3, 21), (1863, 3, 21),
        (1864, 3, 20), (1865, 3, 20), (1866, 3, 21), (1867, 3, 21),
        (1868, 3, 20), (1869, 3, 20), (1870, 3, 21), (1871, 3, 21),
        (1872, 3, 20), (1873, 3, 20), (1874, 3, 21), (1875, 3, 21),
        (1876, 3, 20), (1877, 3, 20), (1878, 3, 21), (1879, 3, 21),
        (1880, 3, 20), (1881, 3, 20), (1882, 3, 21), (1883, 3, 21),
        (1884, 3, 20), (1885, 3, 20), (1886, 3, 21), (1887, 3, 21),
        (1888, 3, 20), (1889, 3, 20), (1890, 3, 21), (1891, 3, 21),
        (1892, 3, 20), (1893, 3, 20), (1894, 3, 21), (1895, 3, 21),
        (1896, 3, 20), (1897, 3, 20), (1898, 3, 20), (1899, 3, 21),
        #                             +1 2415830.0
        (1900, 3, 21), (1901, 3, 21), (1902, 3, 21), (1903, 3, 22),
        #                                            -1 2417656.5
        (1904, 3, 21), (1905, 3, 21), (1906, 3, 21), (1907, 3, 22),
        (1908, 3, 21), (1909, 3, 21), (1910, 3, 21), (1911, 3, 21),
        (1912, 3, 21), (1913, 3, 21), (1914, 3, 21), (1915, 3, 22),
        (1916, 3, 21), (1917, 3, 21), (1918, 3, 21), (1919, 3, 22),
        (1920, 3, 21), (1921, 3, 21), (1922, 3, 21), (1923, 3, 22),
        (1924, 3, 21), (1925, 3, 21), (1926, 3, 21), (1927, 3, 22),
        (1928, 3, 21), (1929, 3, 21), (1930, 3, 21), (1931, 3, 21),
        (1932, 3, 21), (1933, 3, 21), (1934, 3, 21), (1935, 3, 21),
        (1936, 3, 21), (1937, 3, 21), (1938, 3, 21), (1939, 3, 21),
        (1940, 3, 21), (1941, 3, 21), (1942, 3, 21), (1943, 3, 21),
        (1944, 3, 21), (1945, 3, 21), (1946, 3, 21), (1947, 3, 21),
        (1948, 3, 21), (1949, 3, 21), (1950, 3, 21), (1951, 3, 21),
        (1952, 3, 21), (1953, 3, 21), (1954, 3, 21), (1955, 3, 21),
        (1956, 3, 21), (1957, 3, 21), (1958, 3, 21), (1959, 3, 21),
        (1960, 3, 21), (1961, 3, 21), (1962, 3, 21), (1963, 3, 21),
        # +1 2438475.0
        (1964, 3, 20), (1965, 3, 21), (1966, 3, 21), (1967, 3, 21),
        (1968, 3, 20), (1969, 3, 21), (1970, 3, 21), (1971, 3, 21),
        (1972, 3, 20), (1973, 3, 21), (1974, 3, 21), (1975, 3, 21),
        (1976, 3, 20), (1977, 3, 21), (1978, 3, 21), (1979, 3, 21),
        (1980, 3, 20), (1981, 3, 21), (1982, 3, 21), (1983, 3, 21),
        (1984, 3, 20), (1985, 3, 21), (1986, 3, 21), (1987, 3, 21),
        (1988, 3, 20), (1989, 3, 21), (1990, 3, 21), (1991, 3, 21),
        (1992, 3, 20), (1993, 3, 20), (1994, 3, 21), (1995, 3, 21),
        (1996, 3, 20), (1997, 3, 20), (1998, 3, 21), (1999, 3, 21),
        (2000, 3, 20), (2001, 3, 20), (2002, 3, 21), (2003, 3, 21),
        (2004, 3, 20), (2005, 3, 20), (2006, 3, 21), (2007, 3, 21),
        (2008, 3, 20), (2009, 3, 20), (2010, 3, 21), (2011, 3, 21),
        #                             +1 2456737.0
        (2012, 3, 20), (2013, 3, 20), (2014, 3, 20),
        # Start World Center dates 2457103.0
        (2015, 3, 21), (2016, 3, 20), (2017, 3, 20), (2018, 3, 21),
        (2019, 3, 21), (2020, 3, 20), (2021, 3, 20), (2022, 3, 21),
        (2023, 3, 21), (2024, 3, 20), (2025, 3, 20), (2026, 3, 21),
        #                                            +1 2462581.0
        (2027, 3, 21), (2028, 3, 20), (2029, 3, 20), (2030, 3, 20),
        #                                            +1 2464042.0
        (2031, 3, 21), (2032, 3, 20), (2033, 3, 20), (2034, 3, 20),
        (2035, 3, 21), (2036, 3, 20), (2037, 3, 20), (2038, 3, 20),
        (2039, 3, 21), (2040, 3, 20), (2041, 3, 20), (2042, 3, 20),
        (2043, 3, 21), (2044, 3, 20), (2045, 3, 20), (2046, 3, 20),
        (2047, 3, 21), (2048, 3, 20), (2049, 3, 20), (2050, 3, 20),
        (2051, 3, 21), (2052, 3, 20), (2053, 3, 20), (2054, 3, 20),
        (2055, 3, 21), (2056, 3, 20), (2057, 3, 20), (2058, 3, 20),
        # +1 2473173.0
        (2059, 3, 20), (2060, 3, 20), (2061, 3, 20), (2062, 3, 20),
        # +1 2474634.0
        (2063, 3, 20), (2064, 3, 20), # End World Center dates
        (2065, 3, 20), (2066, 3, 20), (2067, 3, 20), (2068, 3, 20),
        (2069, 3, 20), (2070, 3, 20), (2071, 3, 20), (2072, 3, 20),
        (2073, 3, 20), (2074, 3, 20), (2075, 3, 20), (2076, 3, 20),
        (2077, 3, 20), (2078, 3, 20), (2079, 3, 20), (2080, 3, 20),
        #                                            +1 2482304.0
        (2081, 3, 20), (2082, 3, 20), (2083, 3, 20), (2084, 3, 19),
        (2085, 3, 20), (2086, 3, 20), (2087, 3, 20), (2088, 3, 20),
        (2089, 3, 20), (2090, 3, 20), (2091, 3, 20), (2092, 3, 19),
        (2093, 3, 20), (2094, 3, 20), (2095, 3, 20), (2096, 3, 19),
        (2097, 3, 20), (2098, 3, 20), (2099, 3, 20), (2100, 3, 20),
        (2101, 3, 21), (2102, 3, 21), (2103, 3, 21), (2104, 3, 20),
        (2105, 3, 21), (2106, 3, 21), (2107, 3, 21), (2108, 3, 20),
        (2109, 3, 21), (2110, 3, 21), (2111, 3, 21), (2112, 3, 20),
        (2113, 3, 21), (2114, 3, 21), (2115, 3, 21), (2116, 3, 20),
        (2117, 3, 21), (2118, 3, 21), (2119, 3, 21), (2120, 3, 20),
        (2121, 3, 21), (2122, 3, 21), (2123, 3, 21), (2124, 3, 20),
        (2125, 3, 20), (2126, 3, 21), (2127, 3, 21), (2128, 3, 20),
        (2129, 3, 20), (2130, 3, 21), (2131, 3, 21), (2132, 3, 20),
        (2133, 3, 20), (2134, 3, 21), (2135, 3, 21), (2136, 3, 20),
        (2137, 3, 20), (2138, 3, 21), (2139, 3, 21), (2140, 3, 20),
        (2141, 3, 20), (2142, 3, 21), (2143, 3, 21), (2144, 3, 20),
        (2145, 3, 20), (2146, 3, 21), (2147, 3, 21), (2148, 3, 20),
        (2149, 3, 20), (2150, 3, 21), (2151, 3, 21), (2152, 3, 20),
        #              +1
        (2153, 3, 20), (2154, 3, 20), (2155, 3, 21), (2156, 3, 20),
        (2157, 3, 20), (2158, 3, 20), (2159, 3, 21), (2160, 3, 20),
        (2161, 3, 20), (2162, 3, 20), (2163, 3, 21), (2164, 3, 20),
        (2165, 3, 20), (2166, 3, 20), (2167, 3, 21), (2168, 3, 20),
        (2169, 3, 20), (2170, 3, 20), (2171, 3, 21), (2172, 3, 20),
        (2173, 3, 20), (2174, 3, 20), (2175, 3, 21), (2176, 3, 20),
        (2177, 3, 20), (2178, 3, 20), (2179, 3, 21), (2180, 3, 20),
        (2181, 3, 20), (2182, 3, 20), (2183, 3, 21), (2184, 3, 20),
        (2185, 3, 20), (2186, 3, 20), (2187, 3, 21), (2188, 3, 20),
        (2189, 3, 20), (2190, 3, 20), (2191, 3, 20), (2192, 3, 20),
        #                             +1
        (2193, 3, 20), (2194, 3, 20), (2195, 3, 20), (2196, 3, 20),
        #                                            +1
        (2197, 3, 20), (2198, 3, 20), (2199, 3, 20), (2200, 3, 20),
        (2201, 3, 21), (2202, 3, 21), (2203, 3, 21), (2204, 3, 21),
        (2205, 3, 21), (2206, 3, 21), (2207, 3, 21), (2208, 3, 21),
        (2209, 3, 21), (2210, 3, 21), (2211, 3, 21), (2212, 3, 21),
        (2213, 3, 21), (2214, 3, 21), (2215, 3, 21), (2216, 3, 20),
        (2217, 3, 21), (2218, 3, 21), (2219, 3, 21), (2220, 3, 20),
        #                                            +1
        (2221, 3, 21), (2222, 3, 21), (2223, 3, 21), (2224, 3, 20),
        (2225, 3, 21), (2226, 3, 21), (2227, 3, 21), (2228, 3, 20),
        (2229, 3, 21), (2230, 3, 21), (2231, 3, 21), (2232, 3, 20),
        (2233, 3, 21), (2234, 3, 21), (2235, 3, 21), (2236, 3, 20),
        (2237, 3, 21), (2238, 3, 21), (2239, 3, 21), (2240, 3, 20),
        (2241, 3, 21), (2242, 3, 21), (2243, 3, 21), (2244, 3, 20),
        (2245, 3, 21), (2246, 3, 21), (2247, 3, 21), (2248, 3, 20),
        (2249, 3, 21), (2250, 3, 21), (2251, 3, 21), (2252, 3, 20),
        (2253, 3, 21), (2254, 3, 21),

        (2264, 3, 20),
        (2274, 3, 20), # +1
        (2284, 3, 20),

        (2294, 3, 20),
        (2295, 3, 21),
        (2296, 3, 20),
        (2297, 3, 20),
        (2298, 3, 20),
        (2299, 3, 21),
        (2300, 3, 21),
        (2301, 3, 21),
        (2302, 3, 21),
        (2303, 3, 21), # +1
        (2304, 3, 21),

        (2314, 3, 21),
        (2324, 3, 21),
        (2334, 3, 21),
        (2344, 3, 20), # +1
        (2354, 3, 21),
        (2364, 3, 20),
        (2374, 3, 21),
        (2384, 3, 20),
        (2394, 3, 21),
        (2404, 3, 20),
        (2414, 3, 20),
        (2424, 3, 20), # +1
        (2434, 3, 20),
        (2444, 3, 20),
        (2454, 3, 20),
        (2464, 3, 20),
        (2474, 3, 20),
        (2484, 3, 19), # +1

        (2494, 3, 20),
        (2495, 3, 20),
        (2496, 3, 19),
        (2497, 3, 20),
        (2498, 3, 20),
        (2499, 3, 20),
        (2500, 3, 20),
        (2501, 3, 20), # +1
        (2502, 3, 21),
        (2503, 3, 21),
        (2504, 3, 20),

        (2514, 3, 21),
        (2524, 3, 20),
        (2534, 3, 20), # +1
        (2544, 3, 20),
        (2554, 3, 20),
        (2564, 3, 20),
        (2574, 3, 20),
        (2584, 3, 20),
        (2594, 3, 20),
        (2595, 3, 20),
        (2596, 3, 20),
        (2597, 3, 20),
        (2598, 3, 20),
        (2599, 3, 20),
        (2600, 3, 20), # +1 Last year in https://www.timeanddate.com/
        (2601, 3, 21),
        (2602, 3, 21),
        (2603, 3, 21),
        (2604, 3, 20), # +1

        (2614, 3, 21),
        (2624, 3, 20),
        (2634, 3, 21),
        (2644, 3, 20),
        (2654, 3, 21),
        (2664, 3, 20),
        (2674, 3, 20), # +1
        (2684, 3, 20),
        (2694, 3, 20),
        (2695, 3, 20), # +1
        (2696, 3, 20),
        (2697, 3, 20),
        (2698, 3, 20),
        (2699, 3, 20), # +1
        (2700, 3, 21),
        (2701, 3, 21),
        (2702, 3, 21),
        (2703, 3, 21), # +1
        (2704, 3, 21),

        (2714, 3, 21),
        (2724, 3, 21),
        (2734, 3, 21),
        (2744, 3, 20),
        (2754, 3, 21),
        (2764, 3, 20),
        (2774, 3, 21),
        (2784, 3, 20),
        (2794, 3, 20), # +1
        (2804, 3, 20),
        (2814, 3, 20),
        (2824, 3, 20),
        (2834, 3, 20),

        (2844, 3, 20),
        (2854, 3, 20),
        (2864, 3, 20),
        (2874, 3, 20),
        (2884, 3, 19),

        (2894, 3, 20),
        (2895, 3, 20),
        (2896, 3, 19),
        (2897, 3, 19), # +1
        (2898, 3, 20),
        (2899, 3, 20),
        (2900, 3, 20),
        (2901, 3, 21), # -1
        (2902, 3, 21),
        (2903, 3, 21),
        (2904, 3, 20),

        (2914, 3, 21),
        (2924, 3, 20),
        (2934, 3, 20),
        (2944, 3, 20),
        (2954, 3, 20),
        (2964, 3, 20),
        (2974, 3, 20),
        (2984, 3, 20),
        (2994, 3, 20),
        (3004, 3, 20),
        )

    def __init__(self):
        self.gc = GregorianCalendar()

    def _calc_kvymd(self, days, k, v, y, m, data):
        year = (k - 1) * 361 + (v - 1) * 19 + y

        for d in reversed(range(1, days)):
            data.append(((k, v, y, m, d), (year, m, d)))

    def create_date_lists(self):
        data = []

        for k in reversed(range(self.START_K, self.END_K)):
            for v in reversed(range(1, 20)):
                for y in reversed(range(1, 20)):
                    for m in reversed(range(0, 20)):
                        if m == 0:
                            self._calc_kvymd(5, k, v, y, m, data)
                        else:
                            self._calc_kvymd(20, k, v, y, m, data)

        return data

    def check_long_date_from_short_date(self, data):
        items = []

        for item in data:
            b_date, date = item
            bd = self.long_date_from_short_date(date)

        if bd != (b_date + (0, 0, 0)):
            items.append((item, bd))

        return items

    def _create_gregorian_date_range(self, md=(3, 20)):
        return [(year,) + md for year in range(self.START_G, self.END_G, 10)]

    def _create_jd_for_gulian_date(self, data):
        return [self.gc.jd_from_gregorian_date(date) for date in data]

    def analize_date_error(self, options):
        #g_data = self._create_gregorian_date_range()
        #jds = self._create_jd_for_gulian_date(g_data)
        #z = zip(jds, g_data)
        #pprint.pprint([d for d in z])
        data = []
        diff = 0

        for g_date in self.TMP_ANS_DATES:
            b_date = (g_date[0] - self.TRAN_COFF, 1, 1) + (
                g_date[3:6] if len(g_date) > 3 else ())
            gjd = self.gc.jd_from_gregorian_date(g_date)
            bjd, jey_y_m_o, floor_jey = self._jd_from_badi_date(
                b_date, options)
            diff = bjd - gjd
            f = jey_y_m_o % 1 if diff else 0
            data.append((b_date, bjd, g_date, gjd, jey_y_m_o,
                         floor_jey, diff, f))

        return data

    def _jd_from_badi_date(self, b_date, options):
        year, month, day, h, m, s = self.date_from_kvymdhms(
            self.long_date_from_short_date(b_date), short=True)

        if month == 0: # Ayyam-i-Ha
            d = 18 * 19 + day
        elif month < 19:
            d = (month - 1) * 19 + day
        else: # month == 19:
            d = 18 * 19 + 4 + day

        # BADI_EPOCH = 2394645.5 # 2394646.257639
        badi_epoch_m_o = self.BADI_EPOCH - 1
        # Tropical Year: 365.242189 (self.MEAN_TROPICAL_YEAR)
        # Sidereal Year: 365.25636
        # Anomalistic Year: 365.25964
        jey_y_m_o = self.MEAN_TROPICAL_YEAR * (year - 1)
        coff = 0

        if not options.coff:
            # -0.10446546052537767
            coff = -0.11542165116218733

            if year < 101:
                coff -= 0.1345
            elif year < 175:
                coff -= 0.06
            elif year < 191:
                coff += 0.05
            elif year < 241:
                coff += 0.014
            elif year < 361:
                coff -= 0.11
            elif year < 611:
                coff -= 0.07
            elif year < 961:
                coff -= 0.0029
            elif year < 1031:
                coff += 0.083
            elif year < 1056:
                coff -= 0.0029
            elif year <= 1161:
                coff += 0.122

        floor_jey = math.floor(jey_y_m_o + coff)
        return badi_epoch_m_o + floor_jey + d, jey_y_m_o, floor_jey


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description=("Test Badi date ranges."))
    parser.add_argument(
        '-l', '--list', action='store_true', default=False, dest='list',
        help="Generate a list of Badi dates both ling and short versions.")
    parser.add_argument(
        '-c', '--ck-dates', action='store_true', default=False, dest='ck_dates',
        help="Check that long_date_from_short_date() works correctly.")
    parser.add_argument(
        '-a', '--analize', action='store_true', default=False, dest='analize',
        help="Analize Badi date errors when converting to jd.")
    parser.add_argument(
        '-C', '--coff', action='store_true', default=False, dest='coff',
        help="Turn off all coefficents during an analysis.")
    options = parser.parse_args()
    exclusive_error = (options.list, options.ck_dates, options.analize)
    assert exclusive_error.count(True) <= 1, (
        "Options -l, -c, and -a are exclusive.")

    dt = DateTests()

    if options.list:
        data = dt.create_date_lists()
        pprint.pprint(data)

    if options.ck_dates:
        data = dt.create_date_lists()
        bad_items = dt.check_long_date_from_short_date(data)
        bad_items = bad_items if bad_items else "All dates match."
        pprint.pprint(bad_items)

    if options.analize:
        data = dt.analize_date_error(options)
        [print(item) for item in data]
        diffs = []

        for item in data:
            if item[-1] != 0.0:
                diffs.append(item[-1])

        print(len(data), len(diffs))

        if options.coff:
            coff = sum(diffs) / len(diffs)
            print(coff)

    sys.exit(0)
