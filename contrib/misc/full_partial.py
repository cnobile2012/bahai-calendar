#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import os
import sys
import math
import pprint

PWD = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(os.path.dirname(PWD))
sys.path.append(BASE_DIR)

from bahai_calendar import BahaiCalendar, GregorianCalendar


class DateTests(BahaiCalendar):
    START_K = -5
    END_K = 5

    # The following three must be updated in unison.
    # This must be the first Gregorian date in TMP_ANS_DATES below.
    START_G = 1494
    END_G = 3004
    TRAN_COFF = 1843
    # https://www.timeanddate.com/sun/@112931?month=3&year=1844
    # The site below is where I've gotten the Vernal Equinox data it uses
    # the 4, 100, and 400 algorithm, so we must also. The 4 and 128 algorithm
    # is more accurate, but I've not found Vernal Equinox data that uses it.
    # https://data.giss.nasa.gov/modelE/ar5plots/srvernal.html
    # https://aa.usno.navy.mil/data/JulianDate
    # https://aa.usno.navy.mil/data/RS_OneYear  # Sunrise & Sunset
    # https://www.sunrisesunset.com/England/GreaterLondon/Greenwich.asp
    # https://gml.noaa.gov/grad/solcalc/ # Sunrise and Sunset
    # Tehran: 35.696111 (35, 41, 45.9996), 51.423056 (51, 25, 23.0016)
    # Nur Mazandaran Province, Iran (City Center)
    # Nur: 36.569336, 52.0050234
    # I use coordinates and the sunset in the city of Nur to determine the
    # yearly Badi epoch.
    TMP_ANS_DATES = (
        (   1, 3, 20), (   2, 3, 21), (   3, 3, 21), (   4, 3, 20),
        (   5, 3, 20), (   6, 3, 21), (   7, 3, 21), (   8, 3, 20),
        (   9, 3, 20), (  10, 3, 21), (  11, 3, 21), (  12, 3, 20),
        (  13, 3, 20), (  14, 3, 21), (  15, 3, 21), (  16, 3, 20),
        (  17, 3, 20), (  18, 3, 21), (  19, 3, 21), (  20, 3, 20),
        (  21, 3, 20), (  22, 3, 21), (  23, 3, 21), (  24, 3, 20),
        (  25, 3, 20), (  26, 3, 20), (  27, 3, 21), (  28, 3, 20),
        (  29, 3, 20), (  30, 3, 20), (  31, 3, 21), (  32, 3, 20),
        (  33, 3, 20), (  34, 3, 20), (  35, 3, 21), (  36, 3, 20),
        (  37, 3, 20), (  38, 3, 20), (  39, 3, 21), (  40, 3, 20),
        (  41, 3, 20), (  42, 3, 20), (  43, 3, 21), (  44, 3, 20),
        (  45, 3, 20), (  46, 3, 20), (  47, 3, 21), (  48, 3, 20),
        (  49, 3, 20), (  50, 3, 20), (  51, 3, 21), (  52, 3, 20),
        (  53, 3, 20), (  54, 3, 20), (  55, 3, 21), (  56, 3, 20),
        (  57, 3, 20), (  58, 3, 20), (  59, 3, 21), (  60, 3, 21),
        (  61, 3, 20), (  62, 3, 20), (  63, 3, 20), (  64, 3, 20),
        (  65, 3, 20), (  66, 3, 20), (  67, 3, 20), (  68, 3, 20),
        (  69, 3, 20), (  70, 3, 20), (  71, 3, 20), (  72, 3, 20),
        (  73, 3, 20), (  74, 3, 20), (  75, 3, 20), (  76, 3, 20),
        (  77, 3, 20), (  78, 3, 20), (  79, 3, 20), (  80, 3, 20),
        (  81, 3, 20), (  82, 3, 20), (  83, 3, 20), (  84, 3, 20),
        (  85, 3, 20), (  86, 3, 20), (  87, 3, 20), (  88, 3, 20),
        (  89, 3, 20), (  90, 3, 20), (  91, 3, 20), (  92, 3, 20),
        (  93, 3, 20), (  94, 3, 20), (  95, 3, 20), (  96, 3, 19),
        (  97, 3, 20), (  98, 3, 20), (  99, 3, 20), ( 100, 3, 20),
        ( 101, 3, 21), ( 102, 3, 21), ( 103, 3, 21), ( 104, 3, 20),
        ( 105, 3, 21), ( 106, 3, 21), ( 107, 3, 21), ( 108, 3, 20),
        ( 109, 3, 21), ( 110, 3, 21), ( 111, 3, 21), ( 112, 3, 20),
        ( 113, 3, 21), ( 114, 3, 21), ( 115, 3, 21), ( 116, 3, 20),
        ( 117, 3, 21), ( 118, 3, 21), ( 119, 3, 21), ( 120, 3, 20),
        #(), (), (), (),
        #(), (), (), (),
        #(), (), (), (),
        #(), (), (), (),
        #(), (), (), (),
        #(), (), (), (),
        #(), (), (), (),

        (1491, 3, 21), (1492, 3, 20), (1493, 3, 20), (1494, 3, 20),
        (1495, 3, 21), (1496, 3, 20), (1497, 3, 20), (1498, 3, 20),
        (1499, 3, 21), (1500, 3, 21), (1501, 3, 21), (1502, 3, 21),
        (1503, 3, 22), (1504, 3, 21), (1505, 3, 21), (1506, 3, 21),
        (1507, 3, 22), (1508, 3, 21), (1509, 3, 21), (1510, 3, 21),
        (1511, 3, 22), (1512, 3, 21), (1513, 3, 21), (1514, 3, 21),
        (1515, 3, 22), (1516, 3, 21), (1517, 3, 21), (1518, 3, 21),
        (1519, 3, 22), (1520, 3, 21), (1521, 3, 21), (1522, 3, 21),
        (1523, 3, 22), (1524, 3, 21), (1525, 3, 21), (1526, 3, 21),
        (1527, 3, 21), (1528, 3, 21), (1529, 3, 21), (1530, 3, 21),
        (1531, 3, 21), (1532, 3, 21), (1533, 3, 21), (1534, 3, 21),
        (1535, 3, 21), (1536, 3, 21), (1537, 3, 21), (1538, 3, 21),
        (1539, 3, 21), (1540, 3, 21), (1541, 3, 21), (1542, 3, 21),
        (1543, 3, 21), (1544, 3, 21), (1545, 3, 21), (1546, 3, 21),
        (1547, 3, 21), (1548, 3, 21), (1549, 3, 21), (1550, 3, 21),
        (1551, 3, 21), (1552, 3, 21), (1553, 3, 21), (1554, 3, 21),
        (1555, 3, 21), (1556, 3, 21), (1557, 3, 21), (1558, 3, 21),
        (1559, 3, 21), (1560, 3, 20), (1561, 3, 21), (1562, 3, 21),
        (1563, 3, 21), (1564, 3, 20), (1565, 3, 21), (1566, 3, 21),
        (1567, 3, 21), (1568, 3, 20), (1569, 3, 21), (1570, 3, 21),
        (1571, 3, 21), (1572, 3, 20), (1573, 3, 21), (1574, 3, 21),
        (1575, 3, 21), (1576, 3, 20), (1577, 3, 21), (1578, 3, 21),
        (1579, 3, 21), (1580, 3, 20), (1581, 3, 21), (1582, 3, 21),
        # All dates before 1582-10-15 will be wrong.
        (1583, 3, 21), (1584, 3, 20), (1585, 3, 21), (1586, 3, 21),
        (1587, 3, 21), (1588, 3, 20), (1589, 3, 21), (1590, 3, 21),
        (1591, 3, 21), (1592, 3, 20), (1593, 3, 21), (1594, 3, 21),
        (1595, 3, 21), (1596, 3, 20), (1597, 3, 20), (1598, 3, 21),
        (1599, 3, 21), (1600, 3, 20), (1601, 3, 20), (1602, 3, 21),
        (1603, 3, 21), (1604, 3, 20), (1605, 3, 20), (1606, 3, 21),
        (1607, 3, 21), (1608, 3, 20), (1609, 3, 20), (1610, 3, 21),
        (1611, 3, 21), (1612, 3, 20), (1613, 3, 20), (1614, 3, 21),
        (1615, 3, 21), (1616, 3, 20), (1617, 3, 20), (1618, 3, 21),
        (1619, 3, 21), (1620, 3, 20), (1621, 3, 20), (1622, 3, 21),
        (1623, 3, 21), (1624, 3, 20), (1625, 3, 20), (1626, 3, 21),
        (1627, 3, 21), (1628, 3, 20), (1629, 3, 20), (1630, 3, 20),
        (1631, 3, 21), (1632, 3, 20), (1633, 3, 20), (1634, 3, 20),
        (1635, 3, 21), (1636, 3, 20), (1637, 3, 20), (1638, 3, 20),
        (1639, 3, 21), (1640, 3, 20), (1641, 3, 20), (1642, 3, 20),
        (1643, 3, 21), (1644, 3, 20), (1645, 3, 20), (1646, 3, 20),
        (1647, 3, 21), (1648, 3, 20), (1649, 3, 20), (1650, 3, 20),
        (1651, 3, 21), (1652, 3, 20), (1653, 3, 20), (1654, 3, 20),
        (1655, 3, 21), (1656, 3, 20), (1657, 3, 20), (1658, 3, 20),
        (1659, 3, 21), (1660, 3, 20), (1661, 3, 20), (1662, 3, 20),
        (1663, 3, 20), (1664, 3, 20), (1665, 3, 20), (1666, 3, 20),
        (1667, 3, 20), (1668, 3, 20), (1669, 3, 20), (1670, 3, 20),
        (1671, 3, 20), (1672, 3, 20), (1673, 3, 20), (1674, 3, 20),
        (1675, 3, 20), (1676, 3, 20), (1677, 3, 20), (1678, 3, 20),
        (1679, 3, 20), (1680, 3, 20), (1681, 3, 20), (1682, 3, 20),
        (1683, 3, 20), (1684, 3, 20), (1685, 3, 20), (1686, 3, 20),
        (1687, 3, 20), (1688, 3, 20), (1689, 3, 20), (1690, 3, 20),
        (1691, 3, 20), (1692, 3, 20), (1693, 3, 20), (1694, 3, 20),
        (1695, 3, 20), (1696, 3, 19), (1697, 3, 20), (1698, 3, 20),
        (1699, 3, 20), (1700, 3, 20), (1701, 3, 21), (1702, 3, 21),
        (1703, 3, 21), (1704, 3, 20), (1705, 3, 21), (1706, 3, 21),
        (1707, 3, 21), (1708, 3, 20), (1709, 3, 21), (1710, 3, 21),
        (1711, 3, 21), (1712, 3, 20), (1713, 3, 21), (1714, 3, 21),
        (1715, 3, 21), (1716, 3, 20), (1717, 3, 21), (1718, 3, 21),
        (1719, 3, 21), (1720, 3, 20), (1721, 3, 21), (1722, 3, 21),
        (1723, 3, 21), (1724, 3, 20), (1725, 3, 21), (1726, 3, 21),
        (1727, 3, 21), (1728, 3, 20), (1729, 3, 20), (1730, 3, 21),
        (1731, 3, 21), (1732, 3, 20), (1733, 3, 20), (1734, 3, 21),
        (1735, 3, 21), (1736, 3, 20), (1737, 3, 20), (1738, 3, 21),
        (1739, 3, 21), (1740, 3, 20), (1741, 3, 20), (1742, 3, 21),
        (1743, 3, 21), (1744, 3, 20), (1745, 3, 20), (1746, 3, 21),
        (1747, 3, 21), (1748, 3, 20), (1749, 3, 20), (1750, 3, 21),
        (1751, 3, 21), (1752, 3, 20), (1753, 3, 20), (1754, 3, 21),
        (1755, 3, 21), (1756, 3, 20), (1757, 3, 20), (1758, 3, 21),
        (1759, 3, 21), (1760, 3, 20), (1761, 3, 20), (1762, 3, 20),
        (1763, 3, 21), (1764, 3, 20), (1765, 3, 20), (1766, 3, 20),
        (1767, 3, 21), (1768, 3, 20), (1769, 3, 20), (1770, 3, 20),
        (1771, 3, 21), (1772, 3, 20), (1773, 3, 20), (1774, 3, 20),
        (1775, 3, 21), (1776, 3, 20), (1777, 3, 20), (1778, 3, 20),
        (1779, 3, 21), (1780, 3, 20), (1781, 3, 20), (1782, 3, 20),
        (1783, 3, 21), (1784, 3, 20), (1785, 3, 20), (1786, 3, 20),
        (1787, 3, 21), (1788, 3, 20), (1789, 3, 20), (1790, 3, 20),
        (1791, 3, 21), (1792, 3, 20), (1793, 3, 20), (1794, 3, 20),
        (1795, 3, 20), (1796, 3, 20), (1797, 3, 20), (1798, 3, 20),
        (1799, 3, 20), (1800, 3, 21), (1801, 3, 21), (1802, 3, 21),
        (1803, 3, 21), (1804, 3, 21), (1805, 3, 21), (1806, 3, 21),
        (1807, 3, 21), (1808, 3, 21), (1809, 3, 21), (1810, 3, 21),
        (1811, 3, 21), (1812, 3, 21), (1813, 3, 21), (1814, 3, 21),
        (1815, 3, 21), (1816, 3, 21), (1817, 3, 21), (1818, 3, 21),
        (1819, 3, 21), (1820, 3, 21), (1821, 3, 21), (1822, 3, 21),
        (1823, 3, 21), (1824, 3, 21), (1825, 3, 21), (1826, 3, 21),
        (1827, 3, 21), (1828, 3, 20), (1829, 3, 21), (1830, 3, 21),
        (1831, 3, 21), (1832, 3, 20), (1833, 3, 21), (1834, 3, 21),
        (1835, 3, 21), (1836, 3, 20), (1837, 3, 21), (1838, 3, 21),
        (1839, 3, 21), (1840, 3, 20), (1841, 3, 21), (1842, 3, 21),
        (1843, 3, 21),
        # Badi epoch are the first two below.
        (1844, 3, 20), (1844, 3, 20, 18, 14), (1845, 3, 21), (1846, 3, 21),
        (1847, 3, 21), (1848, 3, 20), (1849, 3, 21), (1850, 3, 21),
        (1851, 3, 21), (1852, 3, 20), (1853, 3, 21), (1854, 3, 21),
        (1855, 3, 21), (1856, 3, 20), (1857, 3, 21), (1858, 3, 21),
        (1859, 3, 21), (1860, 3, 20), (1861, 3, 20), (1862, 3, 21),
        (1863, 3, 21), (1864, 3, 20), (1865, 3, 20), (1866, 3, 21),
        (1867, 3, 21), (1868, 3, 20), (1869, 3, 20), (1870, 3, 21),
        (1871, 3, 21), (1872, 3, 20), (1873, 3, 20), (1874, 3, 21),
        (1875, 3, 21), (1876, 3, 20), (1877, 3, 20), (1878, 3, 21),
        (1879, 3, 21), (1880, 3, 20), (1881, 3, 20), (1882, 3, 21),
        (1883, 3, 21), (1884, 3, 20), (1885, 3, 20), (1886, 3, 21),
        (1887, 3, 21), (1888, 3, 20), (1889, 3, 20), (1890, 3, 21),
        (1891, 3, 21), (1892, 3, 20), (1893, 3, 20), (1894, 3, 20),
        (1895, 3, 21), (1896, 3, 20), (1897, 3, 20), (1898, 3, 20),
        (1899, 3, 21), (1900, 3, 21), (1901, 3, 21), (1902, 3, 21),
        (1903, 3, 22), (1904, 3, 21), (1905, 3, 21), (1906, 3, 21),
        (1907, 3, 22), (1908, 3, 21), (1909, 3, 21), (1910, 3, 21),
        (1911, 3, 22), (1912, 3, 21), (1913, 3, 21), (1914, 3, 21),
        (1915, 3, 22), (1916, 3, 21), (1917, 3, 21), (1918, 3, 21),
        (1919, 3, 22), (1920, 3, 21), (1921, 3, 21), (1922, 3, 21),
        (1923, 3, 22), (1924, 3, 21), (1925, 3, 21), (1926, 3, 21),
        (1927, 3, 21), (1928, 3, 21), (1929, 3, 21), (1930, 3, 21),
        (1931, 3, 21), (1932, 3, 21), (1933, 3, 21), (1934, 3, 21),
        (1935, 3, 21), (1936, 3, 21), (1937, 3, 21), (1938, 3, 21),
        (1939, 3, 21), (1940, 3, 21), (1941, 3, 21), (1942, 3, 21),
        (1943, 3, 21), (1944, 3, 21), (1945, 3, 21), (1946, 3, 21),
        (1947, 3, 21), (1948, 3, 21), (1949, 3, 21), (1950, 3, 21),
        (1951, 3, 21), (1952, 3, 21), (1953, 3, 21), (1954, 3, 21),
        (1955, 3, 21), (1956, 3, 21), (1957, 3, 21), (1958, 3, 21),
        (1959, 3, 21), (1960, 3, 20), (1961, 3, 21), (1962, 3, 21),
        (1963, 3, 21), (1964, 3, 20), (1965, 3, 21), (1966, 3, 21),
        (1967, 3, 21), (1968, 3, 20), (1969, 3, 21), (1970, 3, 21),
        (1971, 3, 21), (1972, 3, 20), (1973, 3, 21), (1974, 3, 21),
        (1975, 3, 21), (1976, 3, 20), (1977, 3, 21), (1978, 3, 21),
        (1979, 3, 21), (1980, 3, 20), (1981, 3, 21), (1982, 3, 21),
        (1983, 3, 21), (1984, 3, 20), (1985, 3, 21), (1986, 3, 21),
        (1987, 3, 21), (1988, 3, 20), (1989, 3, 21), (1990, 3, 21),
        (1991, 3, 21), (1992, 3, 20), (1993, 3, 21), (1994, 3, 21),
        (1995, 3, 21), (1996, 3, 20), (1997, 3, 20), (1998, 3, 21),
        (1999, 3, 21), (2000, 3, 20), (2001, 3, 20), (2002, 3, 21),
        (2003, 3, 21), (2004, 3, 20), (2005, 3, 20), (2006, 3, 21),
        (2007, 3, 21), (2008, 3, 20), (2009, 3, 20), (2010, 3, 21),
        (2011, 3, 21), (2012, 3, 20), (2013, 3, 20), (2014, 3, 21),
        # First World Center date on 2015
        (2015, 3, 21), (2016, 3, 20), (2017, 3, 20), (2018, 3, 21),
        (2019, 3, 21), (2020, 3, 20), (2021, 3, 20), (2022, 3, 21),
        (2023, 3, 21), (2024, 3, 20), (2025, 3, 20), (2026, 3, 21),
        (2027, 3, 21), (2028, 3, 20), (2029, 3, 20), (2030, 3, 20),
        (2031, 3, 21), (2032, 3, 20), (2033, 3, 20), (2034, 3, 20),
        (2035, 3, 21), (2036, 3, 20), (2037, 3, 20), (2038, 3, 20),
        (2039, 3, 21), (2040, 3, 20), (2041, 3, 20), (2042, 3, 20),
        (2043, 3, 21), (2044, 3, 20), (2045, 3, 20), (2046, 3, 20),
        (2047, 3, 21), (2048, 3, 20), (2049, 3, 20), (2050, 3, 20),
        (2051, 3, 21), (2052, 3, 20), (2053, 3, 20), (2054, 3, 20),
        (2055, 3, 21), (2056, 3, 20), (2057, 3, 20), (2058, 3, 20),
        (2059, 3, 20), (2060, 3, 20), (2061, 3, 20), (2062, 3, 20),
        #              Last World Center date on 2064
        (2063, 3, 20), (2064, 3, 20), (2065, 3, 20), (2066, 3, 20),
        (2067, 3, 20), (2068, 3, 20), (2069, 3, 20), (2070, 3, 20),
        (2071, 3, 20), (2072, 3, 20), (2073, 3, 20), (2074, 3, 20),
        (2075, 3, 20), (2076, 3, 20), (2077, 3, 20), (2078, 3, 20),
        (2079, 3, 20), (2080, 3, 20), (2081, 3, 20), (2082, 3, 20),
        (2083, 3, 20), (2084, 3, 20), (2085, 3, 20), (2086, 3, 20),
        (2087, 3, 20), (2088, 3, 20), (2089, 3, 20), (2090, 3, 20),
        (2091, 3, 20), (2092, 3, 20), (2093, 3, 20), (2094, 3, 20),
        (2095, 3, 20), (2096, 3, 19), (2097, 3, 20), (2098, 3, 20),
        (2099, 3, 20), (2100, 3, 20), (2101, 3, 21), (2102, 3, 21),
        (2103, 3, 21), (2104, 3, 20), (2105, 3, 21), (2106, 3, 21),
        (2107, 3, 21), (2108, 3, 20), (2109, 3, 21), (2110, 3, 21),
        (2111, 3, 21), (2112, 3, 20), (2113, 3, 21), (2114, 3, 21),
        (2115, 3, 21), (2116, 3, 20), (2117, 3, 21), (2118, 3, 21),
        (2119, 3, 21), (2120, 3, 20), (2121, 3, 21), (2122, 3, 21),
        (2123, 3, 21), (2124, 3, 20), (2125, 3, 21), (2126, 3, 21),
        (2127, 3, 21), (2128, 3, 20), (2129, 3, 20), (2130, 3, 21),
        (2131, 3, 21), (2132, 3, 20), (2133, 3, 20), (2134, 3, 21),
        (2135, 3, 21), (2136, 3, 20), (2137, 3, 20), (2138, 3, 21),
        (2139, 3, 21), (2140, 3, 20), (2141, 3, 20), (2142, 3, 21),
        (2143, 3, 21), (2144, 3, 20), (2145, 3, 20), (2146, 3, 21),
        (2147, 3, 21), (2148, 3, 20), (2149, 3, 20), (2150, 3, 21),
        (2151, 3, 21), (2152, 3, 20), (2153, 3, 20), (2154, 3, 21),
        (2155, 3, 21), (2156, 3, 20), (2157, 3, 20), (2158, 3, 21),
        (2159, 3, 21), (2160, 3, 20), (2161, 3, 20), (2162, 3, 20),
        (2163, 3, 21), (2164, 3, 20), (2165, 3, 20), (2166, 3, 20),
        (2167, 3, 21), (2168, 3, 20), (2169, 3, 20), (2170, 3, 20),
        (2171, 3, 21), (2172, 3, 20), (2173, 3, 20), (2174, 3, 20),
        (2175, 3, 21), (2176, 3, 20), (2177, 3, 20), (2178, 3, 20),
        (2179, 3, 21), (2180, 3, 20), (2181, 3, 20), (2182, 3, 20),
        (2183, 3, 21), (2184, 3, 20), (2185, 3, 20), (2186, 3, 20),
        (2187, 3, 21), (2188, 3, 20), (2189, 3, 20), (2190, 3, 20),
        (2191, 3, 21), (2192, 3, 20), (2193, 3, 20), (2194, 3, 20),
        (2195, 3, 20), (2196, 3, 20), (2197, 3, 20), (2198, 3, 20),
        (2199, 3, 20), (2200, 3, 21), (2201, 3, 21), (2202, 3, 21),
        (2203, 3, 21), (2204, 3, 21), (2205, 3, 21), (2206, 3, 21),
        (2207, 3, 21), (2208, 3, 21), (2209, 3, 21), (2210, 3, 21),
        (2211, 3, 21), (2212, 3, 21), (2213, 3, 21), (2214, 3, 21),
        (2215, 3, 21), (2216, 3, 21), (2217, 3, 21), (2218, 3, 21),
        (2219, 3, 21), (2220, 3, 21), (2221, 3, 21), (2222, 3, 21),
        (2223, 3, 21), (2224, 3, 21), (2225, 3, 21), (2226, 3, 21),
        (2227, 3, 21), (2228, 3, 20), (2229, 3, 21), (2230, 3, 21),
        (2231, 3, 21), (2232, 3, 20), (2233, 3, 21), (2234, 3, 21),
        (2235, 3, 21), (2236, 3, 20), (2237, 3, 21), (2238, 3, 21),
        (2239, 3, 21), (2240, 3, 20), (2241, 3, 21), (2242, 3, 21),
        (2243, 3, 21), (2244, 3, 20), (2245, 3, 21), (2246, 3, 21),
        (2247, 3, 21), (2248, 3, 20), (2249, 3, 21), (2250, 3, 21),
        (2251, 3, 21), (2252, 3, 20), (2253, 3, 21), (2254, 3, 21),
        (2255, 3, 21), (2256, 3, 20), (2257, 3, 21), (2258, 3, 21),
        (2259, 3, 21), (2260, 3, 20), (2261, 3, 20), (2262, 3, 21),
        (2263, 3, 21), (2264, 3, 20), (2265, 3, 20), (2266, 3, 21),
        (2267, 3, 21), (2268, 3, 20), (2269, 3, 20), (2270, 3, 21),
        (2271, 3, 21), (2272, 3, 20), (2273, 3, 20), (2274, 3, 21),
        (2275, 3, 21), (2276, 3, 20), (2277, 3, 20), (2278, 3, 21),
        (2279, 3, 21), (2280, 3, 20), (2281, 3, 20), (2282, 3, 21),
        (2283, 3, 21), (2284, 3, 20), (2285, 3, 20), (2286, 3, 21),
        (2287, 3, 21), (2288, 3, 20), (2289, 3, 20), (2290, 3, 21),
        (2291, 3, 21), (2292, 3, 20), (2293, 3, 20), (2294, 3, 20),
        (2295, 3, 21), (2296, 3, 20), (2297, 3, 20), (2298, 3, 20),
        (2299, 3, 21), (2300, 3, 21), (2301, 3, 21), (2302, 3, 21),
        (2303, 3, 22), (2304, 3, 21), (2305, 3, 21), (2306, 3, 21),
        (2307, 3, 22), (2308, 3, 21), (2309, 3, 21), (2310, 3, 21),
        (2311, 3, 22), (2312, 3, 21), (2313, 3, 21), (2314, 3, 21),
        (2315, 3, 22), (2316, 3, 21), (2317, 3, 21), (2318, 3, 21),
        (2319, 3, 22), (2320, 3, 21), (2321, 3, 21), (2322, 3, 21),
        (2323, 3, 22), (2324, 3, 21), (2325, 3, 21), (2326, 3, 21),
        (2327, 3, 21), (2328, 3, 21), (2329, 3, 21), (2330, 3, 21),
        (2331, 3, 21), (2332, 3, 21), (2333, 3, 21), (2334, 3, 21),
        (2335, 3, 21), (2336, 3, 21), (2337, 3, 21), (2338, 3, 21),
        (2339, 3, 21), (2340, 3, 21), (2341, 3, 21), (2342, 3, 21),
        (2343, 3, 21), (2344, 3, 21), (2345, 3, 21), (2346, 3, 21),
        (2347, 3, 21), (2348, 3, 21), (2349, 3, 21), (2350, 3, 21),
        (2351, 3, 21), (2352, 3, 21), (2353, 3, 21), (2354, 3, 21),
        (2355, 3, 21), (2356, 3, 21), (2357, 3, 21), (2358, 3, 21),
        (2359, 3, 21), (2360, 3, 21), (2361, 3, 21), (2362, 3, 21),
        (2363, 3, 21), (2364, 3, 20), (2365, 3, 21), (2366, 3, 21),
        (2367, 3, 21), (2368, 3, 20), (2369, 3, 21), (2370, 3, 21),
        (2371, 3, 21), (2372, 3, 20), (2373, 3, 21), (2374, 3, 21),
        (2375, 3, 21), (2376, 3, 20), (2377, 3, 21), (2378, 3, 21),
        (2379, 3, 21), (2380, 3, 20), (2381, 3, 21), (2382, 3, 21),
        (2383, 3, 21), (2384, 3, 20), (2385, 3, 21), (2386, 3, 21),
        (2387, 3, 21), (2388, 3, 20), (2389, 3, 21), (2390, 3, 21),
        (2391, 3, 21), (2392, 3, 20), (2393, 3, 21), (2394, 3, 21),
        (2395, 3, 21), (2396, 3, 20), (2397, 3, 20), (2398, 3, 21),
        (2399, 3, 21), (2400, 3, 20), (2401, 3, 20), (2402, 3, 21),
        (2403, 3, 21), (2404, 3, 20), (2405, 3, 20), (2406, 3, 21),
        (2407, 3, 21), (2408, 3, 20), (2409, 3, 20), (2410, 3, 21),
        (2411, 3, 21), (2412, 3, 20), (2413, 3, 20), (2414, 3, 21),
        (2415, 3, 21), (2416, 3, 20), (2417, 3, 20), (2418, 3, 21),
        (2419, 3, 21), (2420, 3, 20), (2421, 3, 20), (2422, 3, 21),
        (2423, 3, 21), (2424, 3, 20), (2425, 3, 20), (2426, 3, 21),
        (2427, 3, 21), (2428, 3, 20), (2429, 3, 20), (2430, 3, 20),
        (2431, 3, 21), (2432, 3, 20), (2433, 3, 20), (2434, 3, 20),
        (2435, 3, 21), (2436, 3, 20), (2437, 3, 20), (2438, 3, 20),
        (2439, 3, 21), (2440, 3, 20), (2441, 3, 20), (2442, 3, 20),
        (2443, 3, 21), (2444, 3, 20), (2445, 3, 20), (2446, 3, 20),
        (2447, 3, 21), (2448, 3, 20), (2449, 3, 20), (2450, 3, 20),
        (2451, 3, 21), (2452, 3, 20), (2453, 3, 20), (2454, 3, 20),
        (2455, 3, 21), (2456, 3, 20), (2457, 3, 20), (2458, 3, 20),
        (2459, 3, 20), (2460, 3, 20), (2461, 3, 20), (2462, 3, 20),
        (2463, 3, 20), (2464, 3, 20), (2465, 3, 20), (2466, 3, 20),
        (2467, 3, 20), (2468, 3, 20), (2469, 3, 20), (2470, 3, 20),
        (2471, 3, 20), (2472, 3, 20), (2473, 3, 20), (2474, 3, 20),
        (2475, 3, 20), (2476, 3, 20), (2477, 3, 20), (2478, 3, 20),
        (2479, 3, 20), (2480, 3, 20), (2481, 3, 20), (2482, 3, 20),
        (2483, 3, 20), (2484, 3, 20), (2485, 3, 20), (2486, 3, 20),
        (2487, 3, 20), (2488, 3, 20), (2489, 3, 20), (2490, 3, 20),
        (2491, 3, 20), (2492, 3, 20), (2493, 3, 20), (2494, 3, 20),
        (2495, 3, 20), (2496, 3, 19), (2497, 3, 20), (2498, 3, 20),
        (2499, 3, 20), (2500, 3, 20), (2501, 3, 21), (2502, 3, 21),
        (2503, 3, 21), (2504, 3, 20), (2505, 3, 21), (2506, 3, 21),
        (2507, 3, 21), (2508, 3, 20), (2509, 3, 21), (2510, 3, 21),
        (2511, 3, 21), (2512, 3, 20), (2513, 3, 21), (2514, 3, 21),
        (2515, 3, 21), (2516, 3, 20), (2517, 3, 21), (2518, 3, 21),
        (2519, 3, 21), (2520, 3, 20), (2521, 3, 21), (2522, 3, 21),
        (2523, 3, 21), (2524, 3, 20), (2525, 3, 21), (2526, 3, 21),
        (2527, 3, 21), (2528, 3, 20), (2529, 3, 20), (2530, 3, 21),
        (2531, 3, 21), (2532, 3, 20), (2533, 3, 20), (2534, 3, 21),
        (2535, 3, 21), (2536, 3, 20), (2537, 3, 20), (2538, 3, 21),
        (2539, 3, 21), (2540, 3, 20), (2541, 3, 20), (2542, 3, 21),
        (2543, 3, 21), (2544, 3, 20), (2545, 3, 20), (2546, 3, 21),
        (2547, 3, 21), (2548, 3, 20), (2549, 3, 20), (2550, 3, 21),
        (2551, 3, 21), (2552, 3, 20), (2553, 3, 20), (2554, 3, 21),
        (2555, 3, 21), (2556, 3, 20), (2557, 3, 20), (2558, 3, 21),
        (2559, 3, 21), (2560, 3, 20), (2561, 3, 20), (2562, 3, 20),
        (2563, 3, 21), (2564, 3, 20), (2565, 3, 20), (2566, 3, 20),
        (2567, 3, 21), (2568, 3, 20), (2569, 3, 20), (2570, 3, 20),
        (2571, 3, 21), (2572, 3, 20), (2573, 3, 20), (2574, 3, 20),
        (2575, 3, 21), (2576, 3, 20), (2577, 3, 20), (2578, 3, 20),
        (2579, 3, 21), (2580, 3, 20), (2581, 3, 20), (2582, 3, 20),
        (2583, 3, 21), (2584, 3, 20), (2585, 3, 20), (2586, 3, 20),
        (2587, 3, 21), (2588, 3, 20), (2589, 3, 20), (2590, 3, 20),
        (2591, 3, 21), (2592, 3, 20), (2593, 3, 20), (2594, 3, 20),
        (2595, 3, 20), (2596, 3, 20), (2597, 3, 20), (2598, 3, 20),
        (2599, 3, 20), (2600, 3, 21), (2601, 3, 21), (2602, 3, 21),
        (2603, 3, 21), (2604, 3, 21), (2605, 3, 21), (2606, 3, 21),
        (2607, 3, 21), (2608, 3, 21), (2609, 3, 21), (2610, 3, 21),
        (2611, 3, 21), (2612, 3, 21), (2613, 3, 21), (2614, 3, 21),
        (2615, 3, 21), (2616, 3, 21), (2617, 3, 21), (2618, 3, 21),
        (2619, 3, 21), (2620, 3, 21), (2621, 3, 21), (2622, 3, 21),
        (2623, 3, 21), (2624, 3, 21), (2625, 3, 21), (2626, 3, 21),
        (2627, 3, 21), (2628, 3, 20), (2629, 3, 21), (2630, 3, 21),
        (2631, 3, 21), (2632, 3, 20), (2633, 3, 21), (2634, 3, 21),
        (2635, 3, 21), (2636, 3, 20), (2637, 3, 21), (2638, 3, 21),
        (2639, 3, 21), (2640, 3, 20), (2641, 3, 21), (2642, 3, 21),
        (2643, 3, 21), (2644, 3, 20), (2645, 3, 21), (2646, 3, 21),
        (2647, 3, 21), (2648, 3, 20), (2649, 3, 21), (2650, 3, 21),
        (2651, 3, 21), (2652, 3, 20), (2653, 3, 21), (2654, 3, 21),
        (2655, 3, 21), (2656, 3, 20), (2657, 3, 21), (2658, 3, 21),
        (2659, 3, 21), (2660, 3, 20), (2661, 3, 20), (2662, 3, 21),
        (2663, 3, 21), (2664, 3, 20), (2665, 3, 20), (2666, 3, 21),
        (2667, 3, 21), (2668, 3, 20), (2669, 3, 20), (2670, 3, 21),
        (2671, 3, 21), (2672, 3, 20), (2673, 3, 20), (2674, 3, 21),
        (2675, 3, 21), (2676, 3, 20), (2677, 3, 20), (2678, 3, 21),
        (2679, 3, 21), (2680, 3, 20), (2681, 3, 20), (2682, 3, 21),
        (2683, 3, 21), (2684, 3, 20), (2685, 3, 20), (2686, 3, 21),
        (2687, 3, 21), (2688, 3, 20), (2689, 3, 20), (2690, 3, 21),
        (2691, 3, 21), (2692, 3, 20), (2693, 3, 20), (2694, 3, 20),
        (2695, 3, 21), (2696, 3, 20), (2697, 3, 20), (2698, 3, 20),
        (2699, 3, 21), (2700, 3, 21), (2701, 3, 21), (2702, 3, 21),
        (2703, 3, 22), (2704, 3, 21), (2705, 3, 21), (2706, 3, 21),
        (2707, 3, 22), (2708, 3, 21), (2709, 3, 21), (2710, 3, 21),
        (2711, 3, 22), (2712, 3, 21), (2713, 3, 21), (2714, 3, 21),
        (2715, 3, 22), (2716, 3, 21), (2717, 3, 21), (2718, 3, 21),
        (2719, 3, 22), (2720, 3, 21), (2721, 3, 21), (2722, 3, 21),
        (2723, 3, 22), (2724, 3, 21), (2725, 3, 21), (2726, 3, 21),
        (2727, 3, 21), (2728, 3, 21), (2729, 3, 21), (2730, 3, 21),
        (2731, 3, 21), (2732, 3, 21), (2733, 3, 21), (2734, 3, 21),
        (2735, 3, 21), (2736, 3, 21), (2737, 3, 21), (2738, 3, 21),
        (2739, 3, 21), (2740, 3, 21), (2741, 3, 21), (2742, 3, 21),
        (2743, 3, 21), (2744, 3, 21), (2745, 3, 21), (2746, 3, 21),
        (2747, 3, 21), (2748, 3, 21), (2749, 3, 21), (2750, 3, 21),
        (2751, 3, 21), (2752, 3, 21), (2753, 3, 21), (2754, 3, 21),
        (2755, 3, 21), (2756, 3, 21), (2757, 3, 21), (2758, 3, 21),
        (2759, 3, 21), (2760, 3, 20), (2761, 3, 21), (2762, 3, 21),
        (2763, 3, 21), (2764, 3, 20), (2765, 3, 21), (2766, 3, 21),
        (2767, 3, 21), (2768, 3, 20), (2769, 3, 21), (2770, 3, 21),
        (2771, 3, 21), (2772, 3, 20), (2773, 3, 21), (2774, 3, 21),
        (2775, 3, 21), (2776, 3, 20), (2777, 3, 21), (2778, 3, 21),
        (2779, 3, 21), (2780, 3, 20), (2781, 3, 21), (2782, 3, 21),
        (2783, 3, 21), (2784, 3, 20), (2785, 3, 21), (2786, 3, 21),
        (2787, 3, 21), (2788, 3, 20), (2789, 3, 21), (2790, 3, 21),
        (2791, 3, 21), (2792, 3, 20), (2793, 3, 20), (2794, 3, 21),
        (2795, 3, 21), (2796, 3, 20), (2797, 3, 20), (2798, 3, 21),
        (2799, 3, 21), (2800, 3, 20), (2801, 3, 20), (2802, 3, 21),
        (2803, 3, 21), (2804, 3, 20), (2805, 3, 20), (2806, 3, 21),
        (2807, 3, 21), (2808, 3, 20), (2809, 3, 20), (2810, 3, 21),
        (2811, 3, 21), (2812, 3, 20), (2813, 3, 20), (2814, 3, 21),
        (2815, 3, 21), (2816, 3, 20), (2817, 3, 20), (2818, 3, 21),
        (2819, 3, 21), (2820, 3, 20), (2821, 3, 20), (2822, 3, 21),
        (2823, 3, 21), (2824, 3, 20), (2825, 3, 20), (2826, 3, 20),
        (2827, 3, 21), (2828, 3, 20), (2829, 3, 20), (2830, 3, 20),
        (2831, 3, 21), (2832, 3, 20), (2833, 3, 20), (2834, 3, 20),
        (2835, 3, 21), (2836, 3, 20), (2837, 3, 20), (2838, 3, 20),
        (2839, 3, 21), (2840, 3, 20), (2841, 3, 20), (2842, 3, 20),
        (2843, 3, 21), (2844, 3, 20), (2845, 3, 20), (2846, 3, 20),
        (2847, 3, 21), (2848, 3, 20), (2849, 3, 20), (2850, 3, 20),
        (2851, 3, 21), (2852, 3, 20), (2853, 3, 20), (2854, 3, 20),
        (2855, 3, 21), (2856, 3, 20), (2857, 3, 20), (2858, 3, 20),
        (2859, 3, 20), (2860, 3, 20), (2861, 3, 20), (2862, 3, 20),
        (2863, 3, 20), (2864, 3, 20), (2865, 3, 20), (2866, 3, 20),
        (2867, 3, 20), (2868, 3, 20), (2869, 3, 20), (2870, 3, 20),
        (2871, 3, 20), (2872, 3, 20), (2873, 3, 20), (2874, 3, 20),
        (2875, 3, 20), (2876, 3, 20), (2877, 3, 20), (2878, 3, 20),
        (2879, 3, 20), (2880, 3, 20), (2881, 3, 20), (2882, 3, 20),
        (2883, 3, 20), (2884, 3, 20), (2885, 3, 20), (2886, 3, 20),
        (2887, 3, 20), (2888, 3, 20), (2889, 3, 20), (2890, 3, 20),
        (2891, 3, 20), (2892, 3, 19), (2893, 3, 20), (2894, 3, 20),
        (2895, 3, 20), (2896, 3, 19), (2897, 3, 20), (2898, 3, 20),
        (2899, 3, 20), (2900, 3, 20), (2901, 3, 21), (2902, 3, 21),
        (2903, 3, 21), (2904, 3, 20), (2905, 3, 21), (2906, 3, 21),
        (2907, 3, 21), (2908, 3, 20), (2909, 3, 21), (2910, 3, 21),
        (2911, 3, 21), (2912, 3, 20), (2913, 3, 21), (2914, 3, 21),
        (2915, 3, 21), (2916, 3, 20), (2917, 3, 21), (2918, 3, 21),
        (2919, 3, 21), (2920, 3, 20), (2921, 3, 21), (2922, 3, 21),
        (2923, 3, 21), (2924, 3, 20), (2925, 3, 20), (2926, 3, 21),
        (2927, 3, 21), (2928, 3, 20), (2929, 3, 20), (2930, 3, 21),
        (2931, 3, 21), (2932, 3, 20), (2933, 3, 20), (2934, 3, 21),
        (2935, 3, 21), (2936, 3, 20), (2937, 3, 20), (2938, 3, 21),
        (2939, 3, 21), (2940, 3, 20), (2941, 3, 20), (2942, 3, 21),
        (2943, 3, 21), (2944, 3, 20), (2945, 3, 20), (2946, 3, 21),
        (2947, 3, 21), (2948, 3, 20), (2949, 3, 20), (2950, 3, 21),
        (2951, 3, 21), (2952, 3, 20), (2953, 3, 20), (2954, 3, 21),
        (2955, 3, 21), (2956, 3, 20), (2957, 3, 20), (2958, 3, 20),
        (2959, 3, 21), (2960, 3, 20), (2961, 3, 20), (2962, 3, 20),
        (2963, 3, 21), (2964, 3, 20), (2965, 3, 20), (2966, 3, 20),
        (2967, 3, 21), (2968, 3, 20), (2969, 3, 20), (2970, 3, 20),
        (2971, 3, 21), (2972, 3, 20), (2973, 3, 20), (2974, 3, 20),
        (2975, 3, 21), (2976, 3, 20), (2977, 3, 20), (2978, 3, 20),
        (2979, 3, 21), (2980, 3, 20), (2981, 3, 20), (2982, 3, 20),
        (2983, 3, 21), (2984, 3, 20), (2985, 3, 20), (2986, 3, 20),
        (2987, 3, 21), (2988, 3, 20), (2989, 3, 20), (2990, 3, 20),
        (2991, 3, 20), (2992, 3, 20), (2993, 3, 20), (2994, 3, 20),
        (2995, 3, 20), (2996, 3, 20), (2997, 3, 20), (2998, 3, 20),
        (2999, 3, 20), (3000, 3, 21), (3001, 3, 21), (3002, 3, 21),
        (3003, 3, 21), (3004, 3, 21),
        )
    INJECT = (
        ((181, 1, 2), (2024, 3, )),
        ((181, 2, 13), (2024, 4, 20)),
        ((181, 3, 18, 20), (2024, 5, 14, 20)), # Sunset Nur -> 15:49:14
        ((181, 3, 19, 20), (2024, 5, 15, 20)), # Sunset Nur -> 15:49:14
        ((181, 4, 1, 17), (2024, 5, 16, 17)),  # Sunset Nur -> 15:49:14
        ((181, 4, 1, 20), (2024, 5, 16, 20)),  # Sunset Nur -> 15:49:14
        )


    def __init__(self):
        #self.BADI_EPOCH = 2394646.259722
        # https://qr.ae/psZONa
        # https://www.someweekendreading.blog/leap-year-revised/
        # 365 + 1/4 − 1/128 = 365.2421875 or 365 + 31/128
        # 365.2421897
        self.MEAN_TROPICAL_YEAR = 365.242189
        self.gc = GregorianCalendar()

    def _calc_kvymd(self, days, k, v, y, m, data):
        year = (k - 1) * 361 + (v - 1) * 19 + y

        for d in reversed(range(1, days)):
            data.append(((k, v, y, m, d), (year, m, d)))

    def create_date_lists(self):
        data = []

        for k in reversed(range(self.START_K, self.END_K)):
            for v in reversed(range(1, 20)):
                for y in reversed(range(1, 20)):
                    for m in reversed(range(0, 20)):
                        if m == 0:
                            self._calc_kvymd(5, k, v, y, m, data)
                        else:
                            self._calc_kvymd(20, k, v, y, m, data)

        return data

    def check_long_date_from_short_date(self, data):
        items = []

        for item in data:
            b_date, date = item
            bd = self.long_date_from_short_date(date)

        if bd != (b_date + (0, 0, 0)):
            items.append((item, bd))

        return items

    def _create_gregorian_date_range(self, md=(3, 20)):
        return [(year,) + md for year in range(self.START_G, self.END_G, 10)]

    def _create_jd_for_gregorian_date(self, data):
        return [self.gc.jd_from_gregorian_date(date) for date in data]

    def analyze_date_error(self, options):
        #g_data = self._create_gregorian_date_range()
        #jds = self._create_jd_for_gregorian_date(g_data)
        #z = zip(jds, g_data)
        #pprint.pprint([d for d in z])
        data = []
        inject = [(b_date[0], (b_date, g_date))
                  for b_date, g_date in self.INJECT]

        for g_date in self.TMP_ANS_DATES:
            b_date = (g_date[0] - self.TRAN_COFF, 1, 1)
            b_date += self._trim_hms(self._get_hms(g_date, True))
            self._calculate_b_date(b_date, g_date, data, options)

            for dates in self._find_dates(b_date[0], inject):
                self._calculate_b_date(*dates, data, options)

        return data

    def _calculate_b_date(self, b_date, g_date, data, options):
        gjd = self.gc.jd_from_gregorian_date(
            g_date, exact=options.exact, alt=options.alt_leap)
        #bjd = self._jd_from_badi_date(b_date, options)
        bjd = self._jd_from_badi_date_alt(b_date, options)

        coff = 0

        if not options.coff:
            coff = self._get_coff(b_date[0])

        bjd += coff
        diff = round(bjd - gjd, 6)
        offby = math.floor(bjd) - math.floor(gjd)
        #         Badi Date  JD  Grg Date JD   Diff  floor
        data.append((b_date, bjd, g_date, gjd, diff, offby))

    def _find_dates(self, year, inject):
        items = []

        for y, item in inject:
            if y == year:
                items.append(item)

        return items

    def _jd_from_badi_date(self, b_date, options):
        date = self.date_from_kvymdhms(
            self.long_date_from_short_date(b_date), short=True)
        year, month, day = date[:3]

        if month == 0: # Ayyam-i-Ha
            d = 18 * 19 + day
        elif month < 19:
            d = (month - 1) * 19 + day
        else: # month == 19:
            # Because we have to use 4 days without knowing the leap year
            # it's necessary fix for the leap year using coefficients below.
            d = 18 * 19 + 4 + day

        # BADI_EPOCH = 2394645.5 # 2394646.257639
        adj = 3 if options.exact else 1
        badi_epoch_m_o = self.BADI_EPOCH - adj
        # Mean Tropical Year: 365.242189
        # Sidereal Year: 365.25636
        # Anomalistic Year: 365.25964
        jey_y_m_o = self.MEAN_TROPICAL_YEAR * (year - 1)
        return round(badi_epoch_m_o + jey_y_m_o + d, 6)

    def _jd_from_badi_date_alt(self, b_date, options):
        date = self.date_from_kvymdhms(
            self.long_date_from_short_date(b_date), short=True)
        year, month, day = date
        td = self._days_in_years(year-1, alt=options.exact)
        adj = 3 if options.exact else 1
        return td + (self.BADI_EPOCH - adj) + day % 1

    def _get_coff(self, year):
        def process_century(y, coff1, coff2, onoff):
            func = lambda y: 1 < y < 100 and y % 4 in onoff
            coff = 0

            if coff1 and y in (1, 34, 67, 100):
                coff = coff1
            elif coff2 and func(y):
                coff = coff2

            return coff

        # General ranges are determined with:
        # ./contrib/misc/full_partial.py -p -S start_year -E end_year
        # Where -S is the 1st year and -E is the nth year + 1 that needs to
        # be process. Use the following command to test the results.
        # ./contrib/misc/full_partial.py -qX -S start_year -E end_year
        # The if or elif statments may not have the same ranges as are
        # passed into the process_century method because we may need to skip
        # over already good results.
        if year < -1820: # -1920 to -1821 (range -S-1920 -E-1821)
            coff = process_century(-1821 - year, -1, -1, (1, 2))
        elif year < -1791: # -1821 to -1792 (range -S-1821 -E-1792)
            coff = process_century(-1792 - year, -1, -1, (1, 2, 3))
        elif year < -1747: # -1792 to -1748 (range -S-1792  -E-1782)
            coff = process_century(-1782 - year, 1, 1, (2,))
        elif year < -1491: # This is temporary
            coff = 0

        elif year < -283: # ~352 to -283 (range -S-352 -E-319)
            coff = process_century(-319 - year, 1, 1, (1,))
        elif year < -254: # -283 to -255 (range -S-283 -E-258)
            coff = process_century(-258 - year, -1, -1, (1,))
        elif year < -245: # -254 to -246 (range -S-254 -E-247)
            coff = process_century(-247 - year, 1, 1, (1, 2, 3))
        elif year < -212: # -245 to -213 (range -S-245 -E-183)
            coff = process_century(-215 - year, 1, 1, (1, 2))
        elif year < -147: # -212 to -148 (range -S-212 -E-181)
            coff = process_century(-181 - year, 0, 1, (3,))
        elif year < -126: # -147 to -127 (range -S-143 -E-126)
            coff = process_century(-130 - year, -1, -1, (1,))
        elif year < -113: # -126 to -114 (range -S-126 -E-115)
            coff = process_century(-115 - year, 1, 1, (1, 2, 3))
        elif year < -80: # -114 to -81 (range -S-114 -E-83)
            coff = process_century(-83 - year, 1, 1, (1, 2))
        elif year < -15: # -80 to -16 (range -S-80 -E-51)
            coff = process_century(-51 - year, 1, 1, (1,))
        elif year < 2: # -79 to 1 (range -S-15 -E-1)
            coff = process_century(-1 - year, 0, -1, (2,))
        elif year < 19: # 2 to 18 (range -S2 -E17)
            coff = process_century(17 - year, 1, 1, (1, 2, 3))
        elif year < 52: # 19 to 51 (range -S19 -E49)
            coff = process_century(49 - year, 1, 1, (1, 2,))
        elif year < 117: # 52 to 116 (range -S52 -E81)
            coff = process_century(81 - year, 1, 1, (1,))
        elif year < 130: # 117 to 129 (range -S117 -E126)
            coff = process_century(126 - year, -1, -1, (1,))
        elif year < 155: # 130 to 154 (range -S130 -E153)
            coff = process_century(153 - year, 1, 1, (1, 2, 3))
        elif year < 188: # 155 to 187 (range -S155 -E186)
            coff = process_century(186 - year, 0, 1, (2, 3))
        elif year < 253: # 188 to 257 (range -S188 -E213)
            coff = process_century(213 - year, 1, 1, (1,))
        elif year < 258: # 258 to 258 (range -S253 -E254)
            coff = process_century(254 - year, -1, 0, ())
        elif year < 287: # 258 to 286 (range -S258 -E285)
            coff = process_century(285 - year, 1, 1, (1, 2, 3))
        elif year < 320: # 287 to 319 (range -S287 -E318)
            coff = process_century(318 - year, 0, 1, (2, 3))
        elif year < 386: # 220 to 386 (range -S320 -E349)
            coff = process_century(349 - year, 1, 1, (1,))
        elif year < 419: # 387 to 418 (range -S386 -E417)
            coff = process_century(417 - year, 1, 1, (1, 2, 3))
        elif year < 452: # 419 to 451 (range -S419 -E449)
            coff = process_century(449 - year, 1, 1, (1, 2))
        elif year < 513: # 452 to 512 (range -S452 -E481)
            coff = process_century(481 - year, 1, 1, (1,))
        elif year < 518: # 513 to 517 (range -S513 -E518)
            coff = process_century(518 - year, 1, 1, (0, 1, 2, 3))
        elif year < 555: # 518 to 554 (range -S518 -E553)
            coff = process_century(553 - year, 1, 1, (1, 2, 3))
        elif year < 588: # 555 to 587 (range -S555 -E585)
            coff = process_century(585 - year, 1, 1, (1, 2))
        elif year < 641: # 588 to 640 (range -S588 -E613)
            coff = process_century(613 - year, 1, 1, (1,))
        elif year < 654: # 641 to 653 (range -S641 -E653)
            coff = process_century(653 - year, 1, 1, (0, 1, 2, 3))
        elif year < 687: # 654 to 686 (range -S654 -E685)
            coff = process_century(685 - year, 1, 1, (1, 2, 3))
        elif year < 720: # 687 to 719 (range -S687 -E717)
            coff = process_century(717 - year, 1, 1, (1, 2))
        elif year < 769: # 720 to 768 (range -S720 -E749)
            coff = process_century(749 - year, 1, 1, (1,))
        elif year < 786: # 769 to 785 (range -S769 -E785)
            coff = process_century(785 - year, 1, 1, (0, 1, 2, 3))
        elif year < 819: # 786 to 818 (range -S786 -E817)
            coff = process_century(817 - year, 1, 1, (1, 2, 3))
        elif year < 852: # 819 to 851 (range -S819 -E849)
            coff = process_century(849 - year, 1, 1, (1, 2))
        elif year < 897: # 852 to 896 (range -S819 -E881)
            coff = process_century(881 - year, 1, 1, (1,))
        elif year < 917: # 897 to 916 (range -S987 -E917)
            coff = process_century(917 - year, 1, 1, (0, 1, 2, 3))
        elif year < 949: # 917 to 850 (range -S918 -E949)
            coff = process_century(949 - year, 1, 1, (1, 2, 3))
        elif year < 984: # 851 to 983 (range -S951 -E981)
            coff = process_century(981 - year, 1, 1, (1, 2))
        elif year < 1025: # 984 to 1024 (range -S984 -E1013)
            coff = process_century(1013 - year, 1, 1, (1,))
        elif year < 1049: # 1025 to 1050 (range -S1025 -E1049)
            coff = process_century(1049 - year, 1, 1, (0, 1, 2, 3))
        elif year < 1083: # 1051 to 1082 (range -S1051 -E1081)
            coff = process_century(1081 - year, 1, 1, (1, 2, 3))
        elif year < 1116: # 1083 to 1115 (range -S1083 -E1113)
            coff = process_century(1113 - year, 1, 1, (1, 2))
        elif year < 1153: # 1116 to 1152 (range -S1116 -E1145)
            coff = process_century(1145 - year, 1, 1, (1,))
        elif year < 1162: # 1153 to 1161 (range -S1153 -E1162)
            coff = process_century(1162 - year, 1, 1, (0, 1, 2, 3))
        else:
            coff = 0

        return coff

    def consecutive_years(self):
        data = []
        py = 0

        for g_date in self.TMP_ANS_DATES:
            year = g_date[0]

            if py != 0 and py != year and year != (py + 1):
                data.append(g_date)

            py = year

        return data

    def get_range(self, end):
        seq = {-159: -259, -64: -159, 35: -64, 134: 35, 233: 134, 332: 233,
               386: 332, 617: 517, 716: 617, 815: 716, 914: 815, 1013: 914,
               1112: 1013, 1211: 1112}
        valid_dates = list(seq.keys())
        start = seq.get(end)
        assert start is not None, (f"You must use valid dates, found {end}, "
                                   f"Valid dates are {valid_dates}.")
        data = []

        for y in range(start, end):
            yj = end - y
            jump = yj if yj in (1, 34, 67, 100) else 0 # jump values
            data.append((y, (end - y) % 4, jump))      # mod 4 values

        return data

    def find_coefficents_precursor(self, options):
        """
        This determines which coefficient group should be used for the
        years provided. The years provided are on the Badi Calendar - or +
        the epoch.

        Arguments to the process_century() function.
        --------------------------------------------
        1. First run `full_partial.py -aGX > filename.txt`
           This file will be long so use `less filename.txt` to look at it.
           The last column will usually be -1.0, 0.0, or 1.0. The 0.0 values
           are already correct, the other two values means there is a
           difference in the between the Gregorian and Badi Julian Period
           days. These are the ones than need the coefficients which fixes them.
        2. The first argument is the current Badi year being processed
           subtracted from the end year argument.
        3. The second argument is the 1st coefficient corresponding to the
           (1, 34, 67, 100) numbers in the output from this method.
        4. The third argument is the 2nd coefficient which fixes the 1 values
           that were not included in the 1st coefficient and the 2 and 3 values.

        If an error JD falls on a 0 (zero) value then you need to change
        the start and end years so that no error JDs fall on a 0 value. The
        average number of years fixed in a group is 99, but this is not a
        hard and fast rule. Obvious break points are where a sequence
        changes. For example where there are two consecutive already good
        values where the values you need to fix had one.

        Note: Zero values never get processes.
        """
        data = []

        for y in range(options.start, options.end):
            year = options.end - y

            if year in (1, 34, 67, 100):
                a = year
            else:
                a = ''

            data.append((y + self.TRAN_COFF, y, year % 4, a))

        return data

    def find_coefficents(self, options):
        found = False
        data = []
        inject = [(b_date[0], (b_date, g_date))
                  for b_date, g_date in self.INJECT]

        for g_date in self.TMP_ANS_DATES:
            b_date = (g_date[0] - self.TRAN_COFF, 1, 1)
            b_date += self._trim_hms(self._get_hms(g_date, True))

            if options.start <= b_date[0]:
                if options.end <= b_date[0]: break
                self._calculate_b_date(b_date, g_date, data, options)

                for dates in self._find_dates(b_date[0], inject):
                    self._calculate_b_date(*dates, data, options)

        cp = {by: (n, a)
              for gy, by, n, a in self.find_coefficents_precursor(options)}
        items = []

        for item in data:
            b_year, month, day = item[0][:3]
            h, m, s = dt._get_hms(item[0], True)
            bjd = item[1]
            msg = (f"{b_year:> 5}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                   f"{s:<02} {bjd:<14} ")
            g_year, month, day = item[2][:3]
            h, m, s = dt._get_hms(item[2], True)
            gjd = item[3]
            msg += (f"{g_year:> 5}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                    f"{s:<02} {gjd:<9} ")
            diff = item[4]
            offby = item[5]
            msg += f"{diff:< 9} {offby:> 2} "
            j, k = cp.get(b_year)
            msg += f"{j} {k:<3}"
            items.append(msg)

        return items


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description=("Test Badi date ranges."))
    parser.add_argument(
        '-l', '--list', action='store_true', default=False, dest='list',
        help="Generate a list of Badi dates both long and short versions.")
    parser.add_argument(
        '-c', '--ck-dates', action='store_true', default=False, dest='ck_dates',
        help="Check that long_date_from_short_date() works correctly.")
    parser.add_argument(
        '-a', '--analyze', action='store_true', default=False, dest='analyze',
        help="Analyze Badi date errors when converting to jd.")
    parser.add_argument(
        '-k', '--consecutive', action='store_true', default=False,
        dest='consecutive',
        help="Check that all dates are consecutive with no holes.")
    parser.add_argument(
        '-r', '--range', type=int, default=0, dest='range',
        help="Dump an analysis of date ranges. Takes an integer value.")
    parser.add_argument(
        '-p', '--precursor', action='store_true', default=False,
        dest='precursor',
        help="Dump data for determining the precursors to the coefficients.")
    parser.add_argument(
        '-q', '--coeff', action='store_true', default=False, dest='coeff',
        help="Dump data for determining coefficients.")
    parser.add_argument(
        '-A', '--alt-leap', action='store_true', default=False,
        dest='alt_leap', help="Use alternative leap year method.")
    parser.add_argument(
        '-C', '--coff', action='store_true', default=False, dest='coff',
        help="Turn off all coefficients during an analysis.")
    parser.add_argument(
        '-X', '--exact', action='store_true', default=False, dest='exact',
        help="Use alternative leap year method.")
    parser.add_argument(
        '-G', '--graph', action='store_true', default=False, dest='graph',
        help=("Turn off all coefficients and dump output appropriate for "
              "graphing."))
    parser.add_argument(
        '-S', '--start', type=int, default=None, dest='start',
        help="Start year of sequence.")
    parser.add_argument(
        '-E', '--end', type=int, default=None, dest='end',
        help="End year of sequence.")
    options = parser.parse_args()
    exclusive_error = (options.list, options.ck_dates, options.analyze,
                       options.consecutive, options.range != 0)
    assert exclusive_error.count(True) <= 1, (
        "Options -l, -c, -a, -k, and -r are exclusive.")

    dt = DateTests()
    ret = 0
    if options.list:
        data = dt.create_date_lists()
        pprint.pprint(data)
    elif options.ck_dates:
        data = dt.create_date_lists()
        bad_items = dt.check_long_date_from_short_date(data)
        bad_items = bad_items if bad_items else "All dates match."
        pprint.pprint(bad_items)
    elif options.analyze:
        if options.graph:
            options.coff = True
            data = dt.analyze_date_error(options)
            items = []

            for item in data:
                year, month, day = item[0][:3]
                h, m, s = dt._get_hms(item[0], True)
                bjd = item[1]
                msg = (f"{year}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                       f"{s:>02} {bjd} ")
                year, month, day = item[2][:3]
                h, m, s = dt._get_hms(item[2], True)
                gjd = item[3]
                msg += (f"{year}-{month:>02}-{day:>02}T{h:>02}:{m:>02}:"
                        f"{s:>02} {gjd} ")
                diff = item[4]
                offby = item[5]
                msg += f"{diff} {offby}"
                items.append(msg)

            [print(item) for item in items]
        else:
            data = dt.analyze_date_error(options)
            [print(item) for item in data]
            diffs = []
            p = 0
            n = 0

            for item in data:
                if item[-1] != 0:
                    diffs.append(item[-1])

                if item[-1] > 0:
                    p += 1
                elif item[-1] < 0:
                    n += 1

            print(f"Total: {len(data)}\nPositive Errors: {p}\n"
                  f"Negative Errors: {n}\nTotal errors: {len(diffs)}")

            if options.coff:
                coff = sum(diffs) / len(diffs)
                print(coff)
    elif options.consecutive:
        data = dt.consecutive_years()
        [print(item) for item in data]
    elif options.range != 0:
        data = dt.get_range(options.range)
        [print(item) for item in data]
        print(f"Total years: {len(data)}")
    elif options.precursor:
        if options.start is None or options.end is None:
            print("If option -p is used, -S and -E must also be used.")
            ret = 1
        else:
            data = dt.find_coefficents_precursor(options)
            [print(f"{gy:> 5} {by:> 5}, {n:<1} {a:>2}")
             for gy, by, n, a in data]
            print(f"Total years: {len(data)}")
    elif options.coeff:
        if options.start is None or options.end is None:
            print("If option -q is used, -S and -E must also be used.")
            ret = 1
        else:
            data = dt.find_coefficents(options)
            [print(item) for item in data]
    else:
        parser.print_help()

    sys.exit(ret)
