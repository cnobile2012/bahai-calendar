#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import os
import sys
import math
import pprint

PWD = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(os.path.dirname(PWD))
sys.path.append(BASE_DIR)

from bahai_calendar import BahaiCalendar, GregorianCalendar


class DateTests(BahaiCalendar):
    START_K = -5
    END_K = 5
    START_G = 1544
    END_G = 3000

    TMP_ANS_DATES = (
        ((-299, 1, 1), (1544, 3, 11)),
        ((-289, 1, 1), (1554, 3, 11)),
        ((-279, 1, 1), (1564, 3, 10)), # +1 2292378.0
        ((-269, 1, 1), (1574, 3, 11)),
        ((-268, 1, 1), (1575, 3, 11)),
        ((-267, 1, 1), (1576, 3, 10)), # +1 2296761.0
        ((-266, 1, 1), (1577, 3, 11)),
        ((-265, 1, 1), (1578, 3, 11)),
        ((-264, 1, 1), (1579, 3, 11)),
        ((-263, 1, 1), (1580, 3, 10)), # +1 2298222.0
        ((-262, 1, 1), (1581, 3, 11)),
        ((-261, 1, 1), (1582, 3, 11)),
        ((-260, 1, 1), (1583, 3, 21)),
        ((-259, 1, 1), (1584, 3, 20)), # +1 2299683.0
        ((-249, 1, 1), (1594, 3, 21)),
        ((-239, 1, 1), (1604, 3, 20)),
        ((-229, 1, 1), (1614, 3, 21)),
        ((-219, 1, 1), (1624, 3, 20)),
        ((-209, 1, 1), (1634, 3, 20)), # +1 2317945.0
        ((-199, 1, 1), (1644, 3, 20)),
        ((-189, 1, 1), (1654, 3, 20)),
        ((-179, 1, 1), (1664, 3, 20)),
        ((-169, 1, 1), (1674, 3, 20)),
        ((-159, 1, 1), (1684, 3, 19)),
        ((-149, 1, 1), (1694, 3, 20)), # +1 2339860.0
        ((-148, 1, 1), (1695, 3, 20)),
        ((-147, 1, 1), (1696, 3, 19)), # +1 2340590.0
        ((-146, 1, 1), (1697, 3, 20)),
        ((-145, 1, 1), (1698, 3, 20)),
        ((-144, 1, 1), (1699, 3, 20)),
        ((-143, 1, 1), (1700, 3, 20)), # +1 2342051.0
        ((-142, 1, 1), (1701, 3, 21)),
        ((-141, 1, 1), (1702, 3, 21)),
        ((-140, 1, 1), (1703, 3, 21)),
        ((-139, 1, 1), (1704, 3, 20)), # +1 2343512.0
        ((-129, 1, 1), (1714, 3, 21)),
        ((-119, 1, 1), (1724, 3, 20)),
        ((-109, 1, 1), (1734, 3, 21)),
        (( -99, 1, 1), (1744, 3, 20)),
        (( -89, 1, 1), (1754, 3, 20)), # +1 2361774.0
        (( -79, 1, 1), (1764, 3, 20)),
        (( -69, 1, 1), (1774, 3, 20)),
        (( -59, 1, 1), (1784, 3, 20)),
        (( -49, 1, 1), (1794, 3, 20)),
        (( -48, 1, 1), (1795, 3, 20)), # +1 2376749.0
        (( -47, 1, 1), (1796, 3, 20)),
        (( -46, 1, 1), (1797, 3, 20)),
        (( -45, 1, 1), (1798, 3, 20)),
        (( -44, 1, 1), (1799, 3, 20)), # +1 2378210.0
        (( -43, 1, 1), (1800, 3, 21)),
        (( -42, 1, 1), (1801, 3, 21)),
        (( -41, 1, 1), (1802, 3, 21)),
        (( -40, 1, 1), (1803, 3, 21)), # +1 2379671.0
        (( -39, 1, 1), (1804, 3, 21)),
        (( -29, 1, 1), (1814, 3, 21)),
        (( -19, 1, 1), (1824, 3, 20)), # +1 2387341.0
        ((  -9, 1, 1), (1834, 3, 21)),
        ((   1, 1, 1, 18, 11), (1844, 3, 20, 18, 11)), # +1 2394646.257639
        ((  11, 1, 1), (1854, 3, 21)),
        ((  21, 1, 1), (1864, 3, 20)),
        ((  31, 1, 1), (1874, 3, 21)),
        ((  41, 1, 1), (1884, 3, 20)),
        ((  51, 1, 1), (1894, 3, 20)), # +1 2412908.0
        ((  56, 1, 1), (1899, 3, 21)),
        ((  57, 1, 1), (1900, 3, 21)),
        ((  58, 1, 1), (1901, 3, 21)),
        ((  59, 1, 1), (1902, 3, 21)), # +1 2415830.0
        ((  60, 1, 1), (1903, 3, 22)),
        ((  61, 1, 1), (1904, 3, 21)),
        ((  71, 1, 1), (1914, 3, 21)),
        ((  81, 1, 1), (1924, 3, 21)),
        ((  91, 1, 1), (1934, 3, 21)),
        (( 101, 1, 1), (1944, 3, 21)),
        (( 111, 1, 1), (1954, 3, 21)),
        (( 121, 1, 1), (1964, 3, 20)), # +1 2438475.0
        (( 131, 1, 1), (1974, 3, 21)),
        (( 141, 1, 1), (1984, 3, 20)),
        (( 151, 1, 1), (1994, 3, 21)),
        (( 161, 1, 1), (2004, 3, 20)),
        (( 171, 1, 1), (2014, 3, 20)), # +1 2456737.0
        (( 172, 1, 1), (2015, 3, 21)), # Start World Center dates 2457103.0
        (( 173, 1, 1), (2016, 3, 20)),
        (( 174, 1, 1), (2017, 3, 20)),
        (( 175, 1, 1), (2018, 3, 21)),
        (( 176, 1, 1), (2019, 3, 21)),
        (( 177, 1, 1), (2020, 3, 20)),
        (( 178, 1, 1), (2021, 3, 20)),
        (( 179, 1, 1), (2022, 3, 21)),
        (( 180, 1, 1), (2023, 3, 21)),
        (( 181, 1, 1), (2024, 3, 20)),
        (( 182, 1, 1), (2025, 3, 20)),
        (( 183, 1, 1), (2026, 3, 21)),
        (( 184, 1, 1), (2027, 3, 21)),
        (( 185, 1, 1), (2028, 3, 20)),
        (( 186, 1, 1), (2029, 3, 20)),
        (( 187, 1, 1), (2030, 3, 20)), # +1 2462581.0
        (( 188, 1, 1), (2031, 3, 21)),
        (( 189, 1, 1), (2032, 3, 20)),
        (( 190, 1, 1), (2033, 3, 20)),
        (( 191, 1, 1), (2034, 3, 20)), # +1 2464042.0
        (( 192, 1, 1), (2035, 3, 21)),
        (( 193, 1, 1), (2036, 3, 20)),
        (( 194, 1, 1), (2037, 3, 20)),
        (( 195, 1, 1), (2038, 3, 20)),
        (( 196, 1, 1), (2039, 3, 21)),
        (( 197, 1, 1), (2040, 3, 20)),
        (( 198, 1, 1), (2041, 3, 20)),
        (( 199, 1, 1), (2042, 3, 20)),
        (( 200, 1, 1), (2043, 3, 21)),
        (( 201, 1, 1), (2044, 3, 20)),
        (( 202, 1, 1), (2045, 3, 20)),
        (( 203, 1, 1), (2046, 3, 20)),
        (( 204, 1, 1), (2047, 3, 21)),
        (( 205, 1, 1), (2048, 3, 20)),
        (( 206, 1, 1), (2049, 3, 20)),
        (( 207, 1, 1), (2050, 3, 20)),
        (( 208, 1, 1), (2051, 3, 21)),
        (( 209, 1, 1), (2052, 3, 20)),
        (( 210, 1, 1), (2053, 3, 20)),
        (( 211, 1, 1), (2054, 3, 20)),
        (( 212, 1, 1), (2055, 3, 21)),
        (( 213, 1, 1), (2056, 3, 20)),
        (( 214, 1, 1), (2057, 3, 20)),
        (( 215, 1, 1), (2058, 3, 20)),
        (( 216, 1, 1), (2059, 3, 20)), # +1 2473173.0
        (( 217, 1, 1), (2060, 3, 20)),
        (( 218, 1, 1), (2061, 3, 20)),
        (( 219, 1, 1), (2062, 3, 20)),
        (( 220, 1, 1), (2063, 3, 20)), # +1 2474634.0
        (( 221, 1, 1), (2064, 3, 20)), # End World Center dates
        (( 231, 1, 1), (2074, 3, 20)),
        (( 241, 1, 1), (2084, 3, 19)), # +1 2482304.0
        (( 251, 1, 1), (2094, 3, 20)),
        (( 256, 1, 1), (2099, 3, 20)),
        (( 257, 1, 1), (2100, 3, 20)), # +1
        (( 258, 1, 1), (2101, 3, 21)),
        (( 259, 1, 1), (2102, 3, 21)),
        (( 260, 1, 1), (2103, 3, 21)),
        (( 261, 1, 1), (2104, 3, 20)),
        (( 271, 1, 1), (2114, 3, 21)),
        (( 281, 1, 1), (2124, 3, 20)),
        (( 291, 1, 1), (2134, 3, 21)),
        (( 301, 1, 1), (2144, 3, 20)),
        (( 311, 1, 1), (2154, 3, 20)), # +1
        (( 321, 1, 1), (2164, 3, 20)),
        (( 331, 1, 1), (2174, 3, 20)),
        (( 341, 1, 1), (2184, 3, 20)),
        (( 351, 1, 1), (2194, 3, 20)),
        (( 352, 1, 1), (2195, 3, 20)),
        (( 353, 1, 1), (2196, 3, 20)),
        (( 354, 1, 1), (2197, 3, 20)),
        (( 355, 1, 1), (2198, 3, 20)),
        (( 356, 1, 1), (2199, 3, 20)),
        (( 357, 1, 1), (2200, 3, 20)), # +1
        (( 358, 1, 1), (2201, 3, 21)),
        (( 359, 1, 1), (2202, 3, 21)),
        (( 360, 1, 1), (2203, 3, 21)),
        (( 361, 1, 1), (2204, 3, 21)), # +1
        ## (2529785.5, ( 371, 1, 1)), # (2214, 3, 21)
        ## (2533437.5, ( 381, 1, 1)), # (2224, 3, 20)
        ## (2537090.5, ( 391, 1, 1)), # (2234, 3, 21)
        ## (2540742.5, ( 401, 1, 1)), # (2244, 3, 20)
        ## (2544395.5, ( 411, 1, 1)), # (2254, 3, 21)
        ## (2548047.5, ( 421, 1, 1)), # (2264, 3, 20)
        ## (2551699.5, ( 431, 1, 1)), # (2274, 3, 20)
        ## (2555352.5, ( 441, 1, 1)), # (2284, 3, 20)
        ## (2559004.5, ( 451, 1, 1)), # (2294, 3, 20)
        ## (2559370.5, ( 452, 1, 1)), # (2295, 3, 21)
        ## (2559735.5, ( 453, 1, 1)), # (2296, 3, 20)
        ## (2560100.5, ( 454, 1, 1)), # (2297, 3, 20)
        ## (2560465.5, ( 455, 1, 1)), # (2298, 3, 20)
        ## (2560831.5, ( 456, 1, 1)), # (2299, 3, 21)
        ## (2561196.5, ( 457, 1, 1)), # (2300, 3, 21)
        ## (2561561.5, ( 458, 1, 1)), # (2301, 3, 21)
        ## (2561926.5, ( 459, 1, 1)), # (2302, 3, 21)
        ## (2562291.5, ( 460, 1, 1)), # (2303, 3, 21)
        ## (2562657.5, ( 461, 1, 1)), # (2304, 3, 21)
        ## (2566309.5, ( 471, 1, 1)), # (2314, 3, 21)
        ## (2569962.5, ( 481, 1, 1)), # (2324, 3, 21)
        ## (2573614.5, ( 491, 1, 1)), # (2334, 3, 21)
        ## (2577266.5, ( 501, 1, 1)), # (2344, 3, 20)
        ## (2580919.5, ( 511, 1, 1)), # (2354, 3, 21)
        ## (2584571.5, ( 521, 1, 1)), # (2364, 3, 20)
        ## (2588224.5, ( 531, 1, 1)), # (2374, 3, 21)
        ## (2591876.5, ( 541, 1, 1)), # (2384, 3, 20)
        ## (2595529.5, ( 551, 1, 1)), # (2394, 3, 21)
        ## (2599181.5, ( 561, 1, 1)), # (2404, 3, 20)
        ## (2602833.5, ( 571, 1, 1)), # (2414, 3, 20)
        ## (2606486.5, ( 581, 1, 1)), # (2424, 3, 20)
        ## (2610138.5, ( 591, 1, 1)), # (2434, 3, 20)
        ## (2613791.5, ( 601, 1, 1)), # (2444, 3, 20)
        ## (2617443.5, ( 611, 1, 1)), # (2454, 3, 20)
        ## (2621096.5, ( 621, 1, 1)), # (2464, 3, 20)
        ## (2624748.5, ( 631, 1, 1)), # (2474, 3, 20)
        ## (2628400.5, ( 641, 1, 1)), # (2484, 3, 19)
        ## (2632053.5, ( 651, 1, 1)), # (2494, 3, 20)
        ## (2632418.5, ( 652, 1, 1)), # (2495, 3, 20)
        ## (2632783.5, ( 653, 1, 1)), # (2496, 3, 19)
        ## (2633149.5, ( 654, 1, 1)), # (2497, 3, 20)
        ## (2633514.5, ( 655, 1, 1)), # (2498, 3, 20)
        ## (2633879.5, ( 656, 1, 1)), # (2499, 3, 20)
        ## (2634244.5, ( 657, 1, 1)), # (2500, 3, 20)
        ## (2634609.5, ( 658, 1, 1)), # (2501, 3, 20)
        ## (2634975.5, ( 659, 1, 1)), # (2502, 3, 21)
        ## (2635340.5, ( 660, 1, 1)), # (2503, 3, 21)
        ## (2635705.5, ( 661, 1, 1)), # (2504, 3, 20)
        ## (2639358.5, ( 671, 1, 1)), # (2514, 3, 21)
        ## (2643010.5, ( 681, 1, 1)), # (2524, 3, 20)
        ## (2646662.5, ( 691, 1, 1)), # (2534, 3, 20)
        ## (2650315.5, ( 701, 1, 1)), # (2544, 3, 20)
        ## (2653967.5, ( 711, 1, 1)), # (2554, 3, 20)
        ## (2657620.5, ( 721, 1, 1)), # (2564, 3, 20)
        ## (2661272.5, ( 731, 1, 1)), # (2574, 3, 20)
        ## (2664925.5, ( 741, 1, 1)), # (2584, 3, 20)
        ## (2668577.5, ( 751, 1, 1)), # (2594, 3, 20)
        ## (2668942.5, ( 752, 1, 1)), # (2595, 3, 20)
        ## (2669308.5, ( 753, 1, 1)), # (2596, 3, 20)
        ## (2669673.5, ( 754, 1, 1)), # (2597, 3, 20)
        ## (2670038.5, ( 755, 1, 1)), # (2598, 3, 20)
        ## (2670403.5, ( 756, 1, 1)), # (2599, 3, 20)
        ## (2670768.5, ( 757, 1, 1)), # (2600, 3, 20)
        ## (2671134.5, ( 758, 1, 1)), # (2601, 3, 21)
        ## (2671499.5, ( 759, 1, 1)), # (2602, 3, 21)
        ## (2671864.5, ( 760, 1, 1)), # (2603, 3, 21)
        ## (2672229.5, ( 761, 1, 1)), # (2604, 3, 20)
        ## (2675882.5, ( 771, 1, 1)), # (2614, 3, 21)
        ## (2679534.5, ( 781, 1, 1)), # (2624, 3, 20)
        ## (2683187.5, ( 791, 1, 1)), # (2634, 3, 21)
        ## (2686839.5, ( 801, 1, 1)), # (2644, 3, 20)
        ## (2690492.5, ( 811, 1, 1)), # (2654, 3, 21)
        ## (2694144.5, ( 821, 1, 1)), # (2664, 3, 20)
        ## (2697796.5, ( 831, 1, 1)), # (2674, 3, 20)
        ## (2701449.5, ( 841, 1, 1)), # (2684, 3, 20)
        ## (2705101.5, ( 851, 1, 1)), # (2694, 3, 20)
        ## (2705466.5, ( 852, 1, 1)), # (2695, 3, 20)
        ## (2705832.5, ( 853, 1, 1)), # (2696, 3, 20)
        ## (2706197.5, ( 854, 1, 1)), # (2697, 3, 20)
        ## (2706562.5, ( 855, 1, 1)), # (2698, 3, 20)
        ## (2706927.5, ( 856, 1, 1)), # (2699, 3, 20)
        ## (2707293.5, ( 857, 1, 1)), # (2700, 3, 21)
        ## (2707658.5, ( 858, 1, 1)), # (2701, 3, 21)
        ## (2708023.5, ( 859, 1, 1)), # (2702, 3, 21)
        ## (2708388.5, ( 860, 1, 1)), # (2703, 3, 21)
        ## (2708754.5, ( 861, 1, 1)), # (2704, 3, 21)
        ## (2712406.5, ( 871, 1, 1)), # (2714, 3, 21)
        ## (2716059.5, ( 881, 1, 1)), # (2724, 3, 21)
        ## (2719711.5, ( 891, 1, 1)), # (2734, 3, 21)
        ## (2723363.5, ( 901, 1, 1)), # (2744, 3, 20)
        ## (2727016.5, ( 911, 1, 1)), # (2754, 3, 21)
        ## (2730668.5, ( 921, 1, 1)), # (2764, 3, 20)
        ## (2734321.5, ( 931, 1, 1)), # (2774, 3, 21)
        ## (2737973.5, ( 941, 1, 1)), # (2784, 3, 20)
        ## (2741625.5, ( 951, 1, 1)), # (2794, 3, 20)
        ## (2745278.5, ( 961, 1, 1)), # (2804, 3, 20)
        ## (2748930.5, ( 971, 1, 1)), # (2814, 3, 20)
        ## (2752583.5, ( 981, 1, 1)), # (2824, 3, 20)
        ## (2756235.5, ( 991, 1, 1)), # (2834, 3, 20)
        ## (2759888.5, (1001, 1, 1)), # (2844, 3, 20)
        ## (2763540.5, (1011, 1, 1)), # (2854, 3, 20)
        ## (2767193.5, (1021, 1, 1)), # (2864, 3, 20)
        ## (2770845.5, (1031, 1, 1)), # (2874, 3, 20)
        ## (2774497.5, (1041, 1, 1)), # (2884, 3, 19)
        ## (2778150.5, (1051, 1, 1)), # (2894, 3, 20)
        ## (2778515.5, (1052, 1, 1)), # (2895, 3, 20)
        ## (2778880.5, (1053, 1, 1)), # (2896, 3, 19)
        ## (2779245.5, (1054, 1, 1)), # (2897, 3, 19)
        ## (2779611.5, (1055, 1, 1)), # (2898, 3, 20)
        ## (2779976.5, (1056, 1, 1)), # (2899, 3, 20)
        ## (2780341.5, (1057, 1, 1)), # (2900, 3, 20)
        ## (2780707.5, (1058, 1, 1)), # (2901, 3, 21)
        ## (2781072.5, (1059, 1, 1)), # (2902, 3, 21)
        ## (2781437.5, (1060, 1, 1)), # (2903, 3, 21)
        ## (2781802.5, (1061, 1, 1)), # (2904, 3, 20)
        ## (2785455.5, (1071, 1, 1)), # (2914, 3, 21)
        ## (2789107.5, (1081, 1, 1)), # (2924, 3, 20)
        ## (2792759.5, (1091, 1, 1)), # (2934, 3, 20)
        ## (2796412.5, (1101, 1, 1)), # (2944, 3, 20)
        ## (2800064.5, (1111, 1, 1)), # (2954, 3, 20)
        ## (2803717.5, (1121, 1, 1)), # (2964, 3, 20)
        ## (2807369.5, (1131, 1, 1)), # (2974, 3, 20)
        ## (2811022.5, (1141, 1, 1)), # (2984, 3, 20)
        ## (2814674.5, (1151, 1, 1)), # (2994, 3, 20)
        ((1161, 1, 1), (3004, 3, 20)),
        )

    def __init__(self):
        self.gc = GregorianCalendar()

    def _calc_kvymd(self, days, k, v, y, m, data):
        year = (k - 1) * 361 + (v - 1) * 19 + y

        for d in reversed(range(1, days)):
            data.append(((k, v, y, m, d), (year, m, d)))

    def create_date_lists(self):
        data = []

        for k in reversed(range(self.START_K, self.END_K)):
            for v in reversed(range(1, 20)):
                for y in reversed(range(1, 20)):
                    for m in reversed(range(0, 20)):
                        if m == 0:
                            self._calc_kvymd(5, k, v, y, m, data)
                        else:
                            self._calc_kvymd(20, k, v, y, m, data)

        return data

    def check_long_date_from_short_date(self, data):
        items = []

        for item in data:
            b_date, date = item
            bd = self.long_date_from_short_date(date)

        if bd != (b_date + (0, 0, 0)):
            items.append((item, bd))

        return items

    def _create_gregorian_date_range(self, md=(3, 20)):
        return [(year,) + md for year in range(self.START_G, self.END_G, 10)]

    def _create_jd_for_gulian_date(self, data):
        return [self.gc.jd_from_gregorian_date(date) for date in data]

    def analize_date_error(self):
        """
        v = [0.18708000000333413,
             0.09334799999487586,
             0.06210399999690708,
             0.030859999998938292,
             0.1403100000025006,
             0.24975999999878695,
             0.15602799999760464,
             0.12478399999963585,
             0.09354000000166707,
             0.20298999999795342,
             0.046770000000833534,
             0.13273900000058347,
             0.10149499999897671,
             0.07025100000100792,
             0.15621999999984837,
             0.10944999999992433,
             0.04696200000034878,
             0.06268000000272878,
             0.17212999999901513,
             0.04715399999986403,
             0.07063499999640044,
             0.03939099999843165,
             0.12536000000545755,
             0.0003839999990304932,
             0.07859000000462402]
        sum(v) / len(v)
        0.10404059999997116
        """
        #g_data = self._create_gregorian_date_range()
        #jds = self._create_jd_for_gulian_date(g_data)
        #z = zip(jds, g_data)
        #pprint.pprint([d for d in z])
        data = []
        diff = 0

        for b_date, g_date in self.TMP_ANS_DATES:
            gjd = self.gc.jd_from_gregorian_date(g_date)

            year, month, day, h, m, s = self.date_from_kvymdhms(
                self.long_date_from_short_date(b_date), short=True)

            if month == 0: # Ayyam-i-Ha
                d = 18 * 19 + day
            elif month < 19:
                d = (month - 1) * 19 + day
            else: # month == 19:
                d = 18 * 19 + 4 + day

            # BADI_EPOCH = 2394645.5 # 2394646.257639
            badi_epoch_m_o = self.BADI_EPOCH - 1
            # Tropical Year: 365.242189 (self.MEAN_TROPICAL_YEAR)
            # Sidereal Year: 365.25636
            # Anomalistic Year: 365.25964
            jey_y_m_o = self.MEAN_TROPICAL_YEAR * (year - 1)
            floor_jey = math.floor(jey_y_m_o - 0.2) #0.10404059999997116)
            bjd = badi_epoch_m_o + floor_jey + d

            diff = bjd - gjd
            f = jey_y_m_o % 1 if diff else 0
            data.append((b_date, bjd, g_date, gjd, jey_y_m_o,
                         floor_jey, diff, f))

        return data


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description=("Test Badi date ranges."))
    parser.add_argument(
        '-l', '--list', action='store_true', default=False, dest='list',
        help="Generate a list of Badi dates both ling and short versions.")
    parser.add_argument(
        '-c', '--ck-dates', action='store_true', default=False, dest='ck_dates',
        help="Check that long_date_from_short_date() works correctly.")
    parser.add_argument(
        '-a', '--analize', action='store_true', default=False, dest='analize',
        help="Analize Badi date errors when converting to jd.")
    options = parser.parse_args()
    exclusive_error = (options.list, options.ck_dates, options.analize)
    assert exclusive_error.count(True) <= 1, (
        "Options -l, -c, and -a are exclusive.")

    dt = DateTests()

    if options.list:
        data = dt.create_date_lists()
        pprint.pprint(data)

    if options.ck_dates:
        data = dt.create_date_lists()
        bad_items = dt.check_long_date_from_short_date(data)
        bad_items = bad_items if bad_items else "All dates match."
        pprint.pprint(bad_items)

    if options.analize:
        data = dt.analize_date_error()
        [print(item) for item in data]
        print(len(data), len([item[-1] for item in data if item[-1] != 0.0]))

    sys.exit(0)
